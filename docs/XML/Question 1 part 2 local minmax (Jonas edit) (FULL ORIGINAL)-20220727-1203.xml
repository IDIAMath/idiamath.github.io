<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 1694  -->
  <question type="stack">
    <name>
      <text>Question#1 part 2 local min/max (Jonas edit) (FULL ORIGINAL)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p><span style="font-size: 0.9375rem;">Given a surface defined by z=f(x,y), where exact expression for f is unknown. Determine local min and max</span><br></p>
<p style="display:none">[[input:ans1]] [[validation:ans1]]</p>
<p style="display:none">[[input:ans2]][[validation:ans2]]</p>
[[jsxgraph height='500px' width='700px' input-ref-ans1="points_min_out" input-ref-ans2="points_max_out"]]

var divid2="stack-jsxgraph-2";
var xrang = {#xrang#};
var yrang = {#yrang#};
var zrang = {#zrang#};

var board = JXG.JSXGraph.initBoard(divid, {
boundingbox: [xrang[0]-4,yrang[1]+4,xrang[1]+4,yrang[0]-4],
keepaspectratio: false,
axis: false
});
var board2 = JXG.JSXGraph.initBoard(divid2, {boundingbox: [xrang[0],yrang[1],xrang[1],yrang[0]], axis: true});
board2.addChild(board);
var p1min=[];
var p1max=[];
var p2min=[];
var p2max=[];
var p3=[];
var localmin = {#localmin#};
var localmax = {#localmax#};
  
/* how much of the graph is visible, you will be able to change the x and y position of the point in accordance to the range provided in the box variable. the answer does not have to be confined to this, yuo can give[15,-9] as the answer for the question. you can also change it to whichever part of the graph you wish to be visible*/

var box = [-10,10];
var view = board.create('view3d', [[xrang[0], yrang[0]], [xrang[1]-xrang[0],yrang[1]-yrang[0]],[xrang, yrang, zrang]],{ xPlaneRear: {visible: false}, yPlaneRear: {visible:false}});

view.D3.az_slide._smax = 12;
var z_scale = board.create('slider', [[-3,-5], [3,-5],[0,0.2,2]], {name: "Skaler z-akse"});


var FF = board.jc.snippet('{#f#}', true, 'x,y', true);
var F = (x,y)=>z_scale.Value()*FF(x,y);
var c = view.create('functiongraph3d',[F,xrang,yrang], { strokeWidth: 0.5, stepsU: 70, stepsV: 70 });

for (let i=0; i<localmin.length; i++){
   p1min[i] = board2.create('point', [i,i], {name: "Min"+(i+1), color: "red"});
   p2min[i] = view.create('point3d', [()=>p1min[i].X(), ()=>p1min[i].Y(), zrang[0]], {name: "Min"+(i+1), color: "red"});
   var ptemp = view.create('point3d', [()=>p1min[i].X(), ()=>p1min[i].Y(), ()=>F(p1min[i].X(), p1min[i].Y())], {withLabel: false});
   view.create('line3d', [p2min[i], ptemp], {dash: 1});
}
for (let i=0; i<localmax.length; i++){
   p1max[i] = board2.create('point', [i,i], {name: "Max"+(i+1), color: "blue"});
   p2max[i] = view.create('point3d', [()=>p1max[i].X(), ()=>p1max[i].Y(), zrang[0]], {name: "Max"+(i+1), color: "blue"});
   var ptemp = view.create('point3d', [()=>p1max[i].X(), ()=>p1max[i].Y(), ()=>F(p1max[i].X(), p1max[i].Y())], {withLabel: false});
   view.create('line3d', [p2max[i], ptemp], {dash: 1});
}

board.update();

var answer_min = document.getElementById(points_min_out);
var answer_max=document.getElementById(points_max_out);
board.on('update', function() {
   var pout =  [];
   var pout2 = [];
   for (let i=0; i<p1min.length; i++){
       pout[i] = [p1min[i].X(), p1min[i].Y()];
   }
   answer_min.value=JSON.stringify(pout);

  for(let i=0; i<p1max.length; i++){
     pout2[i] = [p1max[i].X(), p1max[i].Y()];
  }
  answer_max.value=JSON.stringify(pout2); 
});
[[/jsxgraph]]

[[jsxgraph width="500px" height="300px"]]
[[/jsxgraph]]]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0.1</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2022060100</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[xrang:[-2,2];
yrang:[-2,2];
zrang:[-1,3];
maxError:0.3;
f:2*x^4+2*y^4-8*x*y+12;
fx:diff(f,x);
fy:diff(f,y);
fxx:diff(fx,x);
fyy:diff(fy,y);
fxy:diff(fy,x);
D: fxx*fyy-(fxy)^2;
/*pushing all valid zero points into a seperate array*/
zp:solve([fx,fy],[x,y]);
zpl:length(zp);
n:0;
zpclean:[];
zpdvalues:[];
zpfxxvalues:[];

/* a while loop that checks if a zp element contains imaginary number-> omits it, checks if it contains %r -> omits it. Further evaluates fxx values at valid zp points and pushes them to a list. Further removes the x and y variables along their = sign and pushes to zpclean. */
while (n<zpl) do (n:n+1, if (freeof(%i,zp[n]) = true) and (imagpart(zp[n][1]) = (0 = 0)) and (imagpart(zp[n][2]) = (0 = 0)) then (push(ev(D,zp[n][1],zp[n][2]),zpdvalues),push(ev(fxx,zp[n][1],zp[n][2]),zpfxxvalues),push([rhs(zp[n][1]),rhs(zp[n][2])],zpclean)) );

/* classify local min and max */
localmin:[];
localmax:[];
z:0;
/*push the clean localmin and localmax values in the form [x,y]*/
while (z< length(zpdvalues)) do (z:z+1, if (zpdvalues[z])> 0 and zpfxxvalues[z]>0 then (push(zpclean[z],localmin)) else if (zpdvalues[z] > 0 and zpfxxvalues[z]<0) then push(zpclean[z],localmax));]]></text>
    </questionvariables>
    <specificfeedback format="html">
      <text><![CDATA[[[feedback:prt1]]<br>[[feedback:prt2]]<br>]]></text>
    </specificfeedback>
    <questionnote>
      <text>j</text>
    </questionnote>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:green;"><i class="fa fa-check"></i></span> Correct answer, well done.]]></text>
    </prtcorrect>
    <prtpartiallycorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:orange;"><i class="fa fa-adjust"></i></span> Your answer is partially correct.]]></text>
    </prtpartiallycorrect>
    <prtincorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:red;"><i class="fa fa-times"></i></span> Incorrect answer.]]></text>
    </prtincorrect>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>ans1</name>
      <type>algebraic</type>
      <tans>localmin</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>1</showvalidation>
      <options></options>
    </input>
    <input>
      <name>ans2</name>
      <type>algebraic</type>
      <tans>localmax</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>1</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>prt1</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text><![CDATA[lenlocalmin:length(localmin);
lenans1:length(ans1);

dist(u,v):=float(sqrt((u[1]-v[1])^2+(u[2]-v[2])^2));
dists(a,b):=map(lambda([x],dist(a,x)), b);
errors:map(lambda([x],dists(x,localmin)),ans1);
errors_best:map(lmin,errors);
find_ind(e, errs):=first(sublist_indices(errs, lambda([x], x=e)));
indices:map(lambda([x], find_ind(errors_best[x], errors[x])), makelist(i,i,lenlocalmin));
zip(a,b):=map(lambda([x], [a[x],b[x]]), makelist(i,i,length(a)));
error_indices:zip(errors_best,indices);
errors_OK:sublist(error_indices, lambda([x], x[1]<maxError));
indices_OK:map(lambda([x], x[2]), errors_OK);
correct_mins:length(unique(indices_OK));]]></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>NumAbsolute</answertest>
        <sans>correct_mins</sans>
        <tans>lenlocalmin</tans>
        <testoptions>0.5</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1.0000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-1-T</trueanswernote>
        <truefeedback format="html">
          <text>Du fant alle lokale minimum! ({@lenlocalmin@});</text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>1</falsenextnode>
        <falseanswernote>prt1-1-F</falseanswernote>
        <falsefeedback format="html">
          <text>Du har ikke funnet alle nullpunktene</text>
        </falsefeedback>
      </node>
      <node>
        <name>1</name>
        <answertest>NumAbsolute</answertest>
        <sans>correct_mins</sans>
        <tans>lenlocalmin</tans>
        <testoptions>lenlocalmin-1</testoptions>
        <quiet>0</quiet>
        <truescoremode>+</truescoremode>
        <truescore>0.5000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-2-T</trueanswernote>
        <truefeedback format="html">
          <text>Du har funnet noen nullpunkt ({@correct_mins@}), men mangler {@lenlocalmin-correct_mins@}</text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt1-2-F</falseanswernote>
        <falsefeedback format="html">
          <text>Du har ikke funnet noen nullpunkt :(</text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>prt2</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text><![CDATA[lenlocalmax:length(localmax);
lenans2:length(ans2);

dist(u,v):=float(sqrt((u[1]-v[1])^2+(u[2]-v[2])^2));
dists(a,b):=map(lambda([x],dist(a,x)), b);
errors2:map(lambda([x],dists(x,localmax)),ans2);
errors2_best:map(lmin,errors2);
find_ind(e, errs):=first(sublist_indices(errs, lambda([x], x=e)));
indices2:map(lambda([x], find_ind(errors2_best[x], errors2[x])), makelist(i,i,lenlocalmax));
zip(a,b):=map(lambda([x], [a[x],b[x]]), makelist(i,i,length(a)));
error2_indices:zip(errors2_best,indices2);
errors2_OK:sublist(error2_indices, lambda([x],x[1]<maxError));
indices2_OK:map(lambda([x],x[2]), errors2_OK);
correct_max:length(unique(indices2_OK));]]></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>NumAbsolute</answertest>
        <sans>correct_max</sans>
        <tans>lenlocalmax</tans>
        <testoptions>0.5</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1.0000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt2-1-T</trueanswernote>
        <truefeedback format="html">
          <text>Du fant alle lokale maksimum! ({@lenlocalmax@});</text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>1</falsenextnode>
        <falseanswernote>prt2-1-F</falseanswernote>
        <falsefeedback format="html">
          <text>Du har ikke funnet alle lokale maksimum</text>
        </falsefeedback>
      </node>
      <node>
        <name>1</name>
        <answertest>NumAbsolute</answertest>
        <sans>correct_max</sans>
        <tans>lenlocalmax</tans>
        <testoptions>lenlocalmax-1</testoptions>
        <quiet>0</quiet>
        <truescoremode>+</truescoremode>
        <truescore>0.5000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt2-2-T</trueanswernote>
        <truefeedback format="html">
          <text>Du har funnet noen toppunkt ({@correct_max@}), men mangler {@lenlocalmax-correct_max@}</text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt2-2-F</falseanswernote>
        <falsefeedback format="html">
          <text>Du har ikke funnet noen toppunkt :(</text>
        </falsefeedback>
      </node>
    </prt>
  </question>

</quiz>
