<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 1684  -->
  <question type="stack">
    <name>
      <text>Question#1 part 1 unknown F (original)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>drag the black point to move the red point on the graph</p>




<p></p>
<p><span style="font-size: 0.9375rem;" id="question">Given a surface defined by z=f(x,y), and Fxy where exact expression for f is unknown. Select a point where partial derivatives are positive/negative/zero</span><br></p>

[[jsxgraph height='750px' width='1550px']]

// set the value of input field to []
document.getElementsByClassName("algebraic")[0].value = "[x,y]";

// checkbox visibility on hover creation

var checkbox = document.createElement("input");
var span = document.createElement("span");
var br = document.createElement("br");
var br2 = document.createElement("br");

checkbox.setAttribute("type","checkbox");
span.innerHTML = `Visible on hover`;
document.getElementsByClassName("clearfix")[0].appendChild(span);
document.getElementsByClassName("clearfix")[0].appendChild(checkbox);
document.getElementsByClassName("clearfix")[0].appendChild(br);
document.getElementsByClassName("clearfix")[0].appendChild(br2);


checkbox.addEventListener("change",graphHoverVisibility);

//constants
var functionArr = [];
var labelArr = [];
var selected = false;

var board = JXG.JSXGraph.initBoard(divid, {
boundingbox: [-8, 8, 8, -8],
keepaspectratio: false,
axis: false
});

/* how much of the graph is visible, you will be able to change the x and y position of the point in accordance to the range provided in the box variable. the answer does not have to be confined to this, yuo can give[15,-9] as the answer for the question. you can also change it to whichever part of the graph you wish to be visible*/

var box = [-10,10];
var view = board.create('view3d', [[-6, -3], [8, 8],[box, box, box]],{ xPlaneRear: {visible: false}, yPlaneRear: {visible:false}});

view.D3.az_slide._smax = 12;


//graph f
var FExpr = '{#f#}';

var F = board.jc.snippet(FExpr, true, 'x,y', true);
var FGraph = view.create('functiongraph3d',[F,box,box,], { strokeWidth: 0.5, stepsU: 70, stepsV: 70 });
functionArr.push(FGraph);
FGraph.setLabel(FExpr);
labelArr.push(FExpr);



//the point that controlls the point on the graph;
var Axy = view.create('point3d', [2, 2, -5], { withLabel: false, color:'gray',strokeWidth:5 });

//the point reflected on the graph
var A = view.create('point3d',[ function() {return Axy.D3.X()}, function(){return Axy.D3.Y()},function(){return F(Axy.D3.X(), Axy.D3.Y())}], { withLabel: false, color:'red' });

//graph fxy
var FxyExpr = '{#fxy#}';

var Fxy = board.jc.snippet(FxyExpr, true, 'x,y', true); // JessieCode parsing
// 3D surface
var FxyGraph = view.create('functiongraph3d', [
Fxy,
box,
box,
], { strokeWidth: 0.5, stepsU: 70, stepsV: 70,color:'orange'});

functionArr.push(FxyGraph);
FxyGraph.setLabel(FxyExpr);
labelArr.push(FxyExpr);










/* create checkbox for every function3d .
the 'advantage' of lack of element tracing is
i know in which order i created the graphs
*/
for(var i = 0; !(i == functionArr.length);i++) {
var input = document.createElement("input");
var span = document.createElement("span");
var br = document.createElement("br");


input.setAttribute("type","checkbox");
input.setAttribute("class","graphToggle");
span.innerHTML = "hide/show "+ labelArr[i];
document.getElementsByClassName("clearfix")[0].appendChild(span);
document.getElementsByClassName("clearfix")[0].appendChild(input);
document.getElementsByClassName("clearfix")[0].appendChild(br);
input.addEventListener("change",graphSelectVisibility);

}

/* on/off graph toggle*/

function graphSelectVisibility() {

var input = document.getElementsByClassName('graphToggle');
for(var i =0; !(i == functionArr.length);i++){
if(input[i].checked == true) {
functionArr[i].setAttribute({visible:false});
} else {
functionArr[i].setAttribute({visible:true});
}
}
}

FxGraph.setAttribute({highlightStrokeColor:'#f5ad42'});
FGraph.setAttribute({highlightStrokeColor:'#00ccff'})


/*this function hides all other graphs
*/
function selectedGraph(graph) {
graph.on('mouseover', function(){
if(!selected) {
if (checkbox.checked ===false) {
selected = true;

if(graph.getAttribute(highlight) == true) {
for(var i =0; !(i == functionArr.length); i++) {
functionArr[i]
}
}

}else {
graph.setAttribute({highlight:true});
for(var i =0; !(i == functionArr.length); i++) {
functionArr[i].setAttribute({visible:false});
}

graph.setAttribute({visible:true});


graph.on('mouseout', function(){
for(var i =0; !(i == functionArr.length); i++) {
functionArr[i].setAttribute({visible:true});
}
selected = false;
})
}

}
})
}


function graphHoverVisibility() {

if (checkbox.checked ===true) {

for(var c =0; !(c == functionArr.length); c++) {
selectedGraph(functionArr[c]);
}
}//end if
}//end functionvisibility

[[/jsxgraph]]
<p></p>
<p><span>The point = [[input:ans1]][[validation:ans1]] </span></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text><![CDATA[<p dir="ltr" style="text-align: left;">write your answer in the form: [x,y]</p><p dir="ltr" style="text-align: left;">do not confuse local extrema with GLOBAL extrema</p>]]></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0.1</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2022060100</text>
    </stackversion>
    <questionvariables>
      <text>a:rand_with_prohib(-10,10,[0]);
b:rand_with_prohib(-10,10,[0]);
f:x*y^2-x;

fx:diff(f,x);
fy:diff(f,y);
fxy:diff(fy,x);</text>
    </questionvariables>
    <specificfeedback format="html">
      <text><![CDATA[[[feedback:prt1]]<br><br>]]></text>
    </specificfeedback>
    <questionnote>
      <text>k</text>
    </questionnote>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:green;"><i class="fa fa-check"></i></span> Correct answer, well done.]]></text>
    </prtcorrect>
    <prtpartiallycorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:orange;"><i class="fa fa-adjust"></i></span> Your answer is partially correct.]]></text>
    </prtpartiallycorrect>
    <prtincorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:red;"><i class="fa fa-times"></i></span> Incorrect answer.]]></text>
    </prtincorrect>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>ans1</name>
      <type>algebraic</type>
      <tans>[x,y]</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>1</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>prt1</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text><![CDATA[score:0;
sa1:if ev(fx,x=ans1[1],y=ans1[2]) = 0 then score: score+6 else if ev(fx,x=ans1[1],y=ans1[2]) >0 then score: score+3 else if ev(fx,x=ans1[1],y=ans1[2]) <0 then score:score +1; 
sa2:if ev(fy,x=ans1[1],y=ans1[2]) = 0 then score: score+6 else if ev(fy,x=ans1[1],y=ans1[2]) >0 then score: score+3 else if ev(fy,x=ans1[1],y=ans1[2]) <0 then score:score +1; 
sa3:if ev(fxy,x=ans1[1],y=ans1[2]) = 0 then score: score+6 else if ev(fxy,x=ans1[1],y=ans1[2]) >0 then score: score+3 else if ev(fxy,x=ans1[1],y=ans1[2]) <0 then score:score +1; 
/*if the student answer is right, then the teachers answer is equivelant to stud answer, otherwise, the teachers answer needs to have a value, so the best solution is 
 set the value to a random code, that no student will ever get right or know exists*/
ta: if score =10 then ans1 else [rand(50)+10000,rand(50)+10000];]]></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>AlgEquiv</answertest>
        <sans>ans1</sans>
        <tans>ta</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1.0000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt1-1-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[<p dir="ltr" style="text-align: left;">One of the entries may be right although it is highlighted in red.</p>]]></text>
        </falsefeedback>
      </node>
    </prt>
  </question>

</quiz>