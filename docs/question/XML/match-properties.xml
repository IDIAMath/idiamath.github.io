<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 234  -->
  <question type="stack">
    <name>
      <text>[match-properties] Define function with certain properties (HGS 22 May'23)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>
  Give an example of a function where the first partial derivatives at
    \((x={@x0@},y={@y0@})\) is 
     {@if xsign > 0 then "positive"
      else if xsign < 0 then "negative"
      else "zero"@}
     with respect to \(x\) and
     {@if ysign > 0 then "positive"
      else if ysign < 0 then "negative"
      else "zero"@}
     with respect to \(y\).
</p>
   
<p style="display:none">[[input:p1]][[validation:p1]]</p>
<p style="display:none">[[input:p2]][[validation:p2]]</p>
<p style="display:none">[[input:stateStore]][[validation:stateStore]]</p>

[[jsxgraph height='850px' width='850px' input-ref-p1="pRef" input-ref-p2="qRef" 
    input-ref-ans1="ans1Ref" input-ref-stateStore="stateRef"]]

   // Get a reference to the hidden answer to hold the board state
   var state = document.getElementById(stateRef); 

   // Initialise the hidden answer variables to avoid errors:
   var pref = document.getElementById(pRef); 
   var qref = document.getElementById(qRef); 
   pref.value = 1 ;
   qref.value = 1 ;

   // Make the button to draw the function
   let btn = document.getElementById("draw_button");
   btn.addEventListener("click", drawFunction); 

   //Create the board
   var board = JXG.JSXGraph.initBoard(divid, {
      boundingbox: [-8, 8, 8, -8],
      keepaspectratio: false,
      axis: false
   });


   // Create the 3dView
   var box = [-5, 5];
   var view = board.create('view3d',
      [
         [-6, -3], [8, 8],
         [box, box, box]
      ],
      {
         xPlaneRear: {visible: false},
         yPlaneRear: {visible: false},
      });


   // Create sliders for scaling, and for the optional parameters
   var scale_slider = board.create('slider', [[-7,-6],[5,-6],[0,1,2]], {name: "Skaler z-akse"});
   var slider_p = board.create('slider', [[-7,-6.5],[5,-6.5],[-1,1,1]], {name: "p"});
   var slider_q = board.create('slider', [[-7,-7],[5,-7],[-1,1,1]], {name: "q"});
   // The p and q sliders are hidden until needed
   slider_q.hide();
   slider_p.hide();

   // We bind the parameters slides to STACK's answer variables
   // This let's Maxima use the values when grading
   stack_jxg.bind_slider(pRef,slider_p);
   stack_jxg.bind_slider(qRef,slider_q);
   
   // Variables for the draggable bottom point, 
   // the corresponding point on the graph and a dashed line in between
   var p_bottom, p_graph, dashline; 

   p_bottom = view.create('point3d', [1,1,-5]);
   
   //Variables used when drawing the graph
   var dFx, dFy, tangplane, tangx, tangy, scale_x, scale_y, F, funcExpr, fGraph;

   // drawFunction is called when the clicks the button to draw the answer function
   function drawFunction() {

      //We get the function expression supplied by student
      var ans1=document.getElementById(ans1Ref);
      funcExpr = ans1.value;

      //If the function expression contains the tunable parameters p or q
      //we show the sliders, else we hide them
      if (funcExpr.includes("p")) {
         slider_p.show();
      }else{
         slider_p.hide();
      }
      if (funcExpr.includes("q")){
         slider_q.show();
      }else{
         slider_q.hide();
      }

      //Remove any previous graphs and planes
      board.removeObject(fGraph,false);
      board.removeObject(p_graph,false);
      board.removeObject(dashline,false);
      board.removeObject(tangplane,false);
      board.removeObject(tangx,false);
      board.removeObject(tangy,false);

      // We use a first order central difference to get numerical
      // approximations for Fx and Fy
      var h = 0.01 //Stepsize for finite difference
      var FF = board.jc.snippet(funcExpr, true, 'x,y', true); // JessieCode parsing of function
      F = (x,y) => scale_slider.Value()*FF(x,y); //Multiply function value with the scale_slider to scale it
      
      // Finite difference approximation of partial derivatives at the x-, y- 
      // coordinates given by the draggable point on the bottom
      dFx = function () {
         var x = p_bottom.D3.X();
         var y = p_bottom.D3.Y();
         return (F(x+h,y)-F(x-h,y))/(2*h);
      }
      dFy = function () {
         var x = p_bottom.D3.X();
         var y = p_bottom.D3.Y();
         return (F(x,y+h)-F(x,y-h))/(2*h);
      }
      
      // Functions that gives the factor that normalizes the tangent plane
      scale_x = ()=> 1.0/Math.sqrt(1+Math.pow(dFx(),2));
      scale_y = ()=> 1.0/Math.sqrt(1+Math.pow(dFy(),2));

      // Draw the point on the graph that corresponds to the bottom point
      p_graph = view.create('point3d', [()=>p_bottom.D3.X(), ()=>p_bottom.D3.Y(), ()=>F(p_bottom.D3.X(), p_bottom.D3.Y())]);
      //Draw a dashed line between graph point and bottom point
      dashline = view.create('line3d', [p_bottom, p_graph], {dash: 1});

      // Draw the "unit" tangent plane (Area 2) - [point, [direction1], [direction2], [length1], [length2]
      // The directions are unit vectors from div(F) - the gives a factor of how much of the directions the plane spans
      tangplane = view.create('plane3d', [p_graph,
         [scale_x,0,()=>scale_x()*dFx()],
         [0,scale_y,()=>scale_y()*dFy()],
         [-0.8,0.8],[-0.8,0.8]], 
         {fillOpacity: 0.8, fillColor: 'red'}
      );
      
      // Gradient lines
      tangx = view.create('line3d', [p_graph, [1,0,dFx],[0,dFx]]);
      tangy = view.create('line3d', [p_graph, [0,1,dFy],[0,dFy]]);
      
      // Plot the graph
      fGraph =view.create('functiongraph3d', [
      F,
      box,
      box,
      ], { strokeWidth: 0.5, stepsU: 70, stepsV: 70 });
      board.update();

   }; //End drawFunction

   // Check if student has started working on the board earlier and load the state of the graph
   if (state.value && state.value != "")
   {
      //Parse the string-representation of the state
      var newState = JSON.parse(state.value);
   
      //Update the different, sliders to previous state
      scale_slider.setValue(newState["scale_slider"]);
      slider_p.setValue(newState["slider_p"]);
      slider_q.setValue(newState["slider_q"]);
      //elevation and rotation sliders
      view.D3.el_slide.setValue(newState["el_slider"]);
      view.D3.az_slide.setValue(newState["az_slider"]);
      //Bottom control point
      p_bottom.D3.coords = newState["p_bottom"];

      board.update();

      //Read function expression and draw everything at the end
      funcExpr = newState["funcExpr"];
      drawFunction();

   }

   //Set an update function that saves the state of the board when it changes
   board.on('update', function() {
      //JSON object to contain the state of the board
      var newState = {};
      //Add all the entries we want to "save"
      newState.scale_slider = scale_slider.Value();
      newState.slider_p = slider_p.Value();
      newState.slider_q = slider_q.Value();
      newState.el_slider = view.D3.el_slide.Value();
      newState.az_slider = view.D3.az_slide.Value();
      newState.funcExpr = funcExpr;
      newState.p_bottom = p_bottom.D3.coords;
      //Store the state in the stateStore answer field as a string
      state.value = JSON.stringify(newState);
   });

[[/jsxgraph]]
<p><span>Your function, \(f(x,y) =\) [[input:ans1]][[validation:ans1]] </span><br>
<input type="button" value="Draw Function" id="draw_button">
</p>
<p> If you'd like, you can include constants \( p, q \) in your expression, and tune their values with sliders in the graph plot </p>]]></text>
    </questiontext>
    <generalfeedback format="html"></generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0.1</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2023010400</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[x0:rand_with_prohib(-5,5,[0]);
y0:rand_with_prohib(-5,5,[0]);

xsign: rand(3)-1;
ysign: rand(3)-1;

modelanswer: xsign*x0*x^2 + ysign*y0*y^2 ;
]]></text>
    </questionvariables>
    <specificfeedback format="html">
      <text>[[feedback:prt1]]</text>
    </specificfeedback>
    <questionnote>
       <text>({@x0@},{@y0@}):({@xsign@},{@ysign@})</text>
    </questionnote>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:green;"><i class="fa fa-check"></i></span> Correct answer, well done.]]></text>
    </prtcorrect>
    <prtpartiallycorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:orange;"><i class="fa fa-adjust"></i></span> Your answer is partially correct.]]></text>
    </prtpartiallycorrect>
    <prtincorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:red;"><i class="fa fa-times"></i></span> Incorrect answer.]]></text>
    </prtincorrect>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>ans1</name>
      <type>algebraic</type>
      <tans>modelanswer</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords>q</allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>2</showvalidation>
      <options></options>
    </input>
    <input>
      <name>p1</name>
      <type>numerical</type>
      <tans>1</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options>hideanswer</options>
    </input>
    <input>
      <name>p2</name>
      <type>numerical</type>
      <tans>1</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options>hideanswer</options>
    </input>
    <input>
      <name>stateStore</name>
      <type>string</type>
      <tans><![CDATA["NA"]]></tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options>hideanswer</options>
    </input>
    <prt>
      <name>prt1</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text><![CDATA[
q:p2;
p:p1;
f:ans1;
fx:diff(f,x);
fy:diff(f,y);
evfx:ev(fx,x=x0,y=y0);
evfy:ev(fy,x=x0,y=y0);
signfx: signum(evfx) ;
signfy: signum(evfy) ;
op : [ "<", "=", ">" ] ;
word : [ "negative", "zero", "positive" ] ;
        ]]></text>

      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>AlgEquiv</answertest>
        <sans>signfx</sans>
        <tans>xsign</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty></truepenalty>
        <truenextnode>1</truenextnode>
        <trueanswernote>prt1-1-T</trueanswernote>
        <truefeedback format="html">
           <text><![CDATA[
<p>Your function, \(f(x,y) = {@f@}\) has partial derivative 
\(f_x = {@fx@}\) which  evaluates to 
\(f_x({@x0@},{@y0@}) = {@evfx@}\)
which is {@word[2+signfy]@}
as required.
</p>
           ]]></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>1</falsenextnode>
        <falseanswernote>prt1-1-F</falseanswernote>
        <falsefeedback format="html">
           <text><![CDATA[
<p>Your function, \(f(x,y) = {@f@}\) has partial derivative 
\(f_x = {@fx@}\) which  evaluates to 
\(f_x({@x0@},{@y0@}) = {@evfx@}\)
which is {@word[2+signfy]@},
but it should have been {@word[2+xsign]@}.
</p>
           ]]></text>
        </falsefeedback>
      </node>
      <node>
        <name>1</name>
        <answertest>AlgEquiv</answertest>
        <sans>signfy</sans>
        <tans>ysign</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>+</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-2-T</trueanswernote>
        <truefeedback format="html">
           <text><![CDATA[
<p>Your function, \(f(x,y) = {@f@}\) has partial derivative 
\(f_y = {@fy@}\) which  evaluates to 
\(f_y({@x0@},{@y0@}) = {@evfy@}\)
which is {@word[2+signfy]@}
as required.
</p>
           ]]></text>
        </truefeedback>
        <falsescoremode>+</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt1-2-F</falseanswernote>
        <falsefeedback format="html">
           <text><![CDATA[
<p>Your function, \(f(x,y) = {@f@}\) has partial derivative 
\(f_y = {@fy@}\) which  evaluates to 
\(f_y({@x0@},{@y0@}) = {@evfy@}\}
which is {@word[2+signfy]@},
but it should have been {@word[2+ysign]@}.
</p>
           ]]></text>
        </falsefeedback>
      </node>
    </prt>
  </question>

</quiz>
