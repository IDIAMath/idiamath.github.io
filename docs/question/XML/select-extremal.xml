<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 5597  -->
  <question type="stack">
    <name>
      <text>[select-extremal] (Jonas-NYEST) (state-store)</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Given a surface defined by \(z=f(x,y)\), shown in the top figure, 
determine local minimums and maximums by dragging the min/max points in the bottom figure</p>

<p style="display:none">[[input:ans1]] [[validation:ans1]]</p>
<p style="display:none">[[input:ans2]][[validation:ans2]]</p>
<p style="display:none">[[input:stateStore]][[validation:stateStore]]</p>

[[jsxgraph height='500px' width='700px' input-ref-ans1="points_min_out" input-ref-ans2="points_max_out" input-ref-stateStore="stateRef"]]

//Get divid for bottom jsxgraph figure by incrementing number in divid of top figure
var regexMatchNumber = /([1-9][0-9]|[1-9])/g;  //Regex that matches number between 1-99
var nextDivNum = Number(divid.match(regexMatchNumber))+1;
var divid2 = divid.replace(regexMatchNumber, nextDivNum);

// Ranges for x,y,z from maxima
var xrang = {#xrang#};
var yrang = {#yrang#};
var zrang = {#zrang#};

//Create 3D-board
// Boundingbox sets the vertical and horizontal units and the position of the origin of the figure
// For instance a boundingbox [-5,10,5,-10] has upper left corner at (-5,10) and lower right corner at (5,-10)
var board = JXG.JSXGraph.initBoard(divid, {
boundingbox: [xrang[0]-4,yrang[1]+4,xrang[1]+4,yrang[0]-4],
keepaspectratio: false,
axis: false
});

//Create the 2D board
var board2 = JXG.JSXGraph.initBoard(divid2, {boundingbox: [xrang[0],yrang[1],xrang[1],yrang[0]], axis: true});

//Add the 3D board as a child of the 2D board, such that the 3D figure updates when we manipulate the 2D figure
board2.addChild(board);

//Arrays holding the min/max points in the 2D figure
var p1min=[];
var p1max=[];

//Arrays holding the min/max points in the base of the 3D figure (xy-plane)
var p2min=[];
var p2max=[];

//Arrays holding the correct max/min points
var localmin = {#localmin#};
var localmax = {#localmax#};
  
// Create the 3D view: -------
/*The large array is of form [ [x,y], [w,h], [[x1,x2], [y1,y2], [z1,z2]] ]. 
The arrays [x, y] and [w, h] define the 2D frame into which the 3D cube is (roughly) projected. 
[[x1, x2], [y1, y2], [z1, z2]] determines the coordinate ranges of the 3D cube. */

var view = board.create('view3d', [[xrang[0], yrang[0]], [xrang[1]-xrang[0],yrang[1]-yrang[0]],[xrang, yrang, zrang]],{ xPlaneRear: {visible: false}, yPlaneRear: {visible:false}});

//-----------

//Create a slider that scales the z-values [0,0.2,2] are the [min,start,max] values of sliders
var z_scale = board.create('slider', [[-3,-5], [3,-5],[0,0.2,2]], {
   name: "Skaler z-akse",
   point1: {frozen: true},
   point2: {frozen: true}
});

var FF = board.jc.snippet('{#f#}', true, 'x,y', true); //Jessiecode parsing of function from maxima

var F = (x,y)=>z_scale.Value()*FF(x,y); //Scale function value by multiplying with z_scale slider value

//Create the surface plot
var c = view.create('functiongraph3d',[F,xrang,yrang], { strokeWidth: 0.5, stepsU: 70, stepsV: 70 });


// Create points for every minimum the students musts find
for (let i=0; i<localmin.length; i++){
   p1min[i] = board2.create('point', [i,i], {name: "Min"+(i+1), color: "red"}); //Point in 2D plane
  
   //Create the corresponding point in the bottom of the 3D plot - values bound to the 2D plot
   p2min[i] = view.create('point3d', [()=>p1min[i].X(), ()=>p1min[i].Y(), zrang[0]], {name: "Min"+(i+1), color: "red"});

   //Create corresponding point on the surface plot - bound by the function value, and (x,y) of the 2D point
   var ptemp = view.create('point3d', [()=>p1min[i].X(), ()=>p1min[i].Y(), ()=>F(p1min[i].X(), p1min[i].Y())], {withLabel: false});

   //Lastly, create a dashed line from the base point to the point on the surface plot
   view.create('line3d', [p2min[i], ptemp], {dash: 1});
}

//Same procedure for the maximal values
for (let i=0; i<localmax.length; i++){
   p1max[i] = board2.create('point', [i,i], {name: "Max"+(i+1), color: "blue"});
   p2max[i] = view.create('point3d', [()=>p1max[i].X(), ()=>p1max[i].Y(), zrang[0]], {name: "Max"+(i+1), color: "blue"});
   var ptemp = view.create('point3d', [()=>p1max[i].X(), ()=>p1max[i].Y(), ()=>F(p1max[i].X(), p1max[i].Y())], {withLabel: false});
   view.create('line3d', [p2max[i], ptemp], {dash: 1});
}



//Obtain references to the answer variables in stack
var answer_min = document.getElementById(points_min_out);
var answer_max=document.getElementById(points_max_out);
var state = document.getElementById(stateRef);

//Check if student has started manipulated the boards earlier, and load the state of the graph
if (state.value && state.value != "")
{
   var newState = JSON.parse(state.value);
   var pout = newState['pout'];
   console.log("saved out", pout);
   for (let i=0; i<p1min.length; i++){
       p1min[i].setPositionDirectly(JXG.COORDS_BY_USER, [pout[i][0], pout[i][1]]);
   }
   for (let i=0; i<p1max.length; i++){
       p1max[i].setPositionDirectly(JXG.COORDS_BY_USER, [pout2[i][0], pout2[i][1]]);
   }
   z_scale.setValue(newState["z_scale"]);
   view.D3.el_slide.setValue(newState["el_slider"]);
   view.D3.az_slide.setValue(newState["az_slider"]);
}

board2.update();

//Set an update function that sets the answer variables in stack to the points the student has selected
board.on('update', function() {

   //Arrays of min/max points
   var pout =  [];
   var pout2 = [];

   //JSON object containing the state of the boards
   var newState = {};

   //Collect minimum points
   for (let i=0; i<p1min.length; i++){
       pout[i] = [p1min[i].X(), p1min[i].Y()];
   }
   //Set answer variable in stack to the current points selected by students in jsxgraph
   answer_min.value=JSON.stringify(pout);

  //Same procedure for max points
  for(let i=0; i<p1max.length; i++){
     pout2[i] = [p1max[i].X(), p1max[i].Y()];
  }
  answer_max.value=JSON.stringify(pout2); 

//Save state of board to STACK answerfield
newState.pout = pout;
newState.pout2 = pout2;
newState.z_scale = z_scale.Value();
newState.el_slider = view.D3.el_slide.Value();
newState.az_slider = view.D3.az_slide.Value();
state.value = JSON.stringify(newState);

});
[[/jsxgraph]]

[[jsxgraph width="500px" height="300px"]]
[[/jsxgraph]]]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0.1</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2022082900</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[xrang: [-2,5];  
yrang: [-2,4];
zrang: [-1,10];

maxError: 0.3; /*Tolerance */

/*Easy example*/
f: (2*x^4+2*y^4-8*x*y+12);

/*Hard example*/
/*f:expand((x-3)*(x+1)*(y-2)*(y+2)*(x*y+3));*/

/*Partial derivatives*/
fx:  diff(f,x);
fy:  diff(f,y);
fxx: diff(fx,x);
fyy: diff(fy,y);
fxy: diff(fy,x);
D: fx*fyy-(fxy)^2;

/*Solve for critical points*/
critical:solve([fx,fy],[x,y]);

/*Function noDegen takes a list 'l' of solutions [ [x=a, y=b], ...] and returns a list of solutions not containing 'r'*/
noDegen(l,r):=sublist(l, lambda([ll], freeof(r,ll)));
/*Remove degenerate solutions (solutions with free variables stored in %rnum_list)*/
critical_nd: lreduce(noDegen,  %rnum_list,     critical);

/*Function isNotImag returns true if a solution sol ([x=a,y=b]) has no imaginary part*/
isNotImag(sol) := is(equal(imagpart(sol),[0=0,0=0]));
/*Remove complex solutions*/
critical_nd_real: sublist(critical_nd, isNotImag);

/*Classify critical points and collect local max/min */
localmin_expr:sublist(critical_nd_real, lambda([p], ev(fxx,p) >0 and ev(D,p)>0));
localmax_expr:sublist(critical_nd_real, lambda([p], ev(fxx,p) < 0 and ev(D,p)>0));

/* Store min/max in [a,b] form, instead of [x=a, y=b] form*/
localmin: float(map(lambda([x], map(rhs, x)), localmin_expr));
localmax: float(map(lambda([x], map(rhs, x)), localmax_expr));]]></text>
    </questionvariables>
    <specificfeedback format="html">
      <text><![CDATA[[[feedback:prt1]]<br>]]></text>
    </specificfeedback>
    <questionnote>
      <text></text>
    </questionnote>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:green;"><i class="fa fa-check"></i></span> Correct answer, well done.]]></text>
    </prtcorrect>
    <prtpartiallycorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:orange;"><i class="fa fa-adjust"></i></span> Your answer is partially correct.]]></text>
    </prtpartiallycorrect>
    <prtincorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:red;"><i class="fa fa-times"></i></span> Incorrect answer.]]></text>
    </prtincorrect>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>ans1</name>
      <type>algebraic</type>
      <tans>localmin</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options></options>
    </input>
    <input>
      <name>ans2</name>
      <type>algebraic</type>
      <tans>localmax</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options></options>
    </input>
    <input>
      <name>stateStore</name>
      <type>string</type>
      <tans>none</tans>
      <boxsize>100</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>prt1</name>
      <value>4.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text><![CDATA[lenlocalmin:length(localmin);
lenlocalmax:length(localmax);

/*Function dist(u,v) returns the distance between points u and v*/
dist(u,v):=float(sqrt((u[1]-v[1])^2+(u[2]-v[2])^2));

/*Function dists(u,l) takes a point 'u' and a list of points 'l', and returns a list with the distances between 'u' and the points in 'l'*/
dists(u,l):=map(lambda([x],dist(u,x)), l);

/*'errors' holds the distances from the points the student found, to all the minimums*/
errors:map(lambda([x],dists(x,localmin)),ans1);

/*bestErrorWithIndex takes a list 'e' of errors, and returns a list with the smallest error and its index*/
bestErrorWithIndex(e):=[lmin(e), first(sublist_indices(e, lambda([x], x=lmin(e))))];

/*Find the smallest distance from all the student's points to the minimums, along with the minimums index*/
errors_best:map(bestErrorWithIndex, errors);

/*Find which of the best errors are smaller than maxError*/
errors_OK:sublist(errors_best, lambda([x], x[1]<maxError));

/*List containing the indices of approved errors*/
indices_OK:map(lambda([x],x[2]), errors_OK);

/*Number of correctly indentified minimums correspond to the number of unique indices in indices_OK*/
correct_mins:length(unique(indices_OK));

/*Same procedure for local max*/
errors2:map(lambda([x],dists(x,localmax)),ans2);
errors_best2:map(bestErrorWithIndex, errors2);
errors_OK2:sublist(errors_best2, lambda([x], x[1]<maxError));
indices_OK2:map(lambda([x],x[2]), errors_OK2);
correct_max:length(unique(indices_OK2));]]></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>CasEqual</answertest>
        <sans>correct_mins+correct_max</sans>
        <tans>lenlocalmin+lenlocalmax</tans>
        <testoptions></testoptions>
        <quiet>1</quiet>
        <truescoremode>+</truescoremode>
        <truescore>1.0000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-1-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[You have found all the local minimums and maximums!<br>
[[if test="not lenlocalmin=0"]] min: {@localmin@} <br>[[/if]] 
[[if test="not lenlocalmax=0"]] max: {@localmax@} <br>[[/if]]]]></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>1</falsenextnode>
        <falseanswernote>prt1-1-F</falseanswernote>
        <falsefeedback format="html">
          <text></text>
        </falsefeedback>
      </node>
      <node>
        <name>1</name>
        <answertest>NumAbsolute</answertest>
        <sans>correct_mins+correct_max</sans>
        <tans>lenlocalmin+lenlocalmax</tans>
        <testoptions>lenlocalmin+lenlocalmax-1</testoptions>
        <quiet>0</quiet>
        <truescoremode>+</truescoremode>
        <truescore>0.5000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-2-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[You have found some local mins/max:<br>
[[if test="lenlocalmin=correct_mins and not lenlocalmin=0"]]
You have found all local minimums: {@localmin@}<br>
[[elif test="not lenlocalmin=0"]]
You have found {@correct_mins@} out of {@lenlocalmin@} minimums.<br>
[[/if]]
[[if test="lenlocalmax=correct_max and not lenlocalmax=0"]]
You have found all local maximums: {@localmax@}<br>
[[elif test="not lenlocalmax=0"]]
You have found {@correct_max@} out of {@lenlocalmax@} maximums.<br>
[[/if]]]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt1-2-F</falseanswernote>
        <falsefeedback format="html">
          <text>None of your points are sufficiently close to any local min/max</text>
        </falsefeedback>
      </node>
    </prt>
  </question>

</quiz>
