<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 1183  -->
  <question type="stack">
    <name>
      <text>Spherical Coordinates Rotating</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text><![CDATA[<p>Given is a 3D volume with spherical geometry. It is defined by the intervals for each of the spherical coordinates \(r\), \(\phi\) and \(\psi\). Here \(r\) is the radial coordinate and \(\phi\) is the azimuthal angle starting at the \(x\)-axis oriented counterclockwise with \(\phi\in [0, 2 \pi]\). Lastly, \(\psi\) is the polar angle measured from the \(z\)-axis with \(\psi\in [0, \pi]\). </p>

<p> Reconstruct the intervals that define the given volume.  </p> 

<p> Write the interval in the form \(r\in\)<code>[r1,r2]</code> and  \(\phi\in\)<code>[phi1,phi2]</code>, e.g. <code>[1/2,2]</code> and <code>[1/2*pi,2*pi]</code>.<br/>
The generated radii are of the form \(n/2,\in\mathbb{N}\) and the generated angles of the form  \(q\cdot \pi, q\in\mathbb{Q}\). </p>

[[jsxgraph width="500px" height="500px" input-ref-ans1='ans1Ref']]
var board = JXG.JSXGraph.initBoard(divid,{boundingbox : [-8, 8, 8,-8], axis:false, shownavigation : false});
                        var box = [-5,5];
                        var view = board.create('view3d',
		                            [[-6, -3], [8, 8],
		                            [box, box, box]],
		                            {});

		                       // Transform components of the vector function

		                       var TF1 = (u,v,w) => u * Math.cos(v)* Math.sin(w) ;
		                       var TF2 = (u,v,w) => u * Math.sin(v)* Math.sin(w) ;
		                       var TF3 = (u,v,w) => u * Math.cos(w);

		                
	
		                      // Create Slider
		                       var u1ref = {#radius1#};
		                       var u2ref = {#radius2#};
		                       var v1ref = {#phistart#};
		                       var v2ref = {#phistart#}+{#phirange#};
		                       var w1ref = {#psistart#};
		                       var w2ref = {#psistart#}+{#psirange#};

// create volume

              var c1,c2,c3,c4,c5,c6; 
              createRefVolume ();

//define function
		                                       function createRefVolume () {
                                            // Create transformed box
                    c1 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w1ref),
                        (u, v) => TF2(u,v,w1ref),
                        (u, v) => TF3(u,v,w1ref),
                        () => [u1ref, u2ref],
                        () => [v1ref, v2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: true }, strokeColor: "#1f84bc" });

                    c2 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w2ref),
                        (u, v) => TF2(u,v,w2ref),
                        (u, v) => TF3(u,v,w2ref),
                        () => [u1ref, u2ref],
                        () => [v1ref, v2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });

                    c3 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v1ref,w),
                        (u, w) => TF2(u,v1ref,w),
                        (u, w) => TF3(u,v1ref,w),
                        () => [u1ref, u2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c4 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v2ref,w),
                        (u, w) => TF2(u,v2ref,w),
                        (u, w) => TF3(u,v2ref,w),
                        () => [u1ref, u2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c5 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u1ref,v,w),
                        (v, w) => TF2(u1ref,v,w),
                        (v, w) => TF3(u1ref,v,w),
                        () => [v1ref, v2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c6 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u2ref,v,w),
                        (v, w) => TF2(u2ref,v,w),
                        (v, w) => TF3(u2ref,v,w),
                        () => [v1ref, v2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });

                    }
board.update();

/* axis labels*/
                       var xlabel=view.create('point3d',[0.9*box[1],0,(0.6*box[0]+0.4*box[1])], {size:0,name:"x"});
                       var ylabel=view.create('point3d',[0,0.9*box[1],(0.6*box[0]+0.4*box[1])], {size:0,name:"y"});
                       var zlabel=view.create('point3d',[
                           0.7*(0.6*box[0]+0.4*box[1]),
                           0.7*(0.6*box[0]+0.4*box[1]),
                           0.9*box[1]], 
                           {size:0,name:"z"});

[[/jsxgraph]]
<p>\(r\in\) [[input:ans1]] [[validation:ans1]]</p>
<p>\(\phi \in\) [[input:ans2]] [[validation:ans2]]</p>
<p>\(\psi\in\)  [[input:ans3]] [[validation:ans3]]</p>]]></text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>3</defaultgrade>
    <penalty>0.1</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2023010400</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[psiranger:rand([1/6,1/4,1/3,1/2,2/3]);
/* check, that psiranger+psistartr<=1 */
if psiranger>=1/2 then psistartr:rand([1/6,1/4,1/3]) else psistartr:rand([1/6,1/4,1/3,1/2,2/3]);
phiranger:rand([1/6,1/4,1/3,1/2,2/3,3/4,5/6,1]);
phistartr:rand([1/6,1/4,1/3,1/2,2/3,3/4,5/6,1]);

radius1: rand(6)/2;
radius2: radius1+(rand(6)+1)/2;

/* Multiply with PI */
/* numerical data for plotting */
numer:true
phirange:phiranger*%pi;
phistart:phistartr*%pi;
psirange:psiranger*%pi;
psistart:psistartr*%pi;
numer:false
/* symbolic data for checking */
phiranger:phiranger*%pi;
phistartr:phistartr*%pi;
psiranger:psiranger*%pi;
psistartr:psistartr*%pi;]]></text>
    </questionvariables>
    <specificfeedback format="html">
      <text>[[feedback:prt1]]
[[feedback:prt2]]
[[feedback:prt3]]</text>
    </specificfeedback>
    <questionnote>
      <text>Spherical coordinates {@radius1@}, {@radius2@}, {@phistartr@}, {@phiranger@}, {@psistartr@}, {@psiranger@}</text>
    </questionnote>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:green;"><i class="fa fa-check"></i></span> Correct answer, well done.]]></text>
    </prtcorrect>
    <prtpartiallycorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:orange;"><i class="fa fa-adjust"></i></span> Your answer is partially correct.]]></text>
    </prtpartiallycorrect>
    <prtincorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:red;"><i class="fa fa-times"></i></span> Incorrect answer.]]></text>
    </prtincorrect>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>ans1</name>
      <type>algebraic</type>
      <tans>[radius1, radius2]</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>1</showvalidation>
      <options></options>
    </input>
    <input>
      <name>ans2</name>
      <type>algebraic</type>
      <tans>[phistartr,phistartr+phiranger]</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>1</showvalidation>
      <options></options>
    </input>
    <input>
      <name>ans3</name>
      <type>algebraic</type>
      <tans>[psistartr,psistartr+psiranger]</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>1</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>prt1</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text>r1:ans1[1];
r2:ans1[2];</text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>AlgEquiv</answertest>
        <sans>r1</sans>
        <tans>radius1</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty></truepenalty>
        <truenextnode>1</truenextnode>
        <trueanswernote>prt1-1-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Nice, you found the correct value for \(r_1\)! Good job!</p>]]></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>2</falsenextnode>
        <falseanswernote>prt1-1-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[<p>The value you gave for \(r_1\) is not correct.  </p>]]></text>
        </falsefeedback>
      </node>
      <node>
        <name>1</name>
        <answertest>AlgEquiv</answertest>
        <sans>r2</sans>
        <tans>radius2</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>+</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-2-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Nice, you found the correct value for \(r_2\)! Good job!</p> <p> Perfect! You got both radiuses right! </p>]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt1-2-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[<p>The value you gave for \(r_2\) is not correct. Make sure, you're giving the values in the format specified in the task explanation.</p>]]></text>
        </falsefeedback>
      </node>
      <node>
        <name>2</name>
        <answertest>AlgEquiv</answertest>
        <sans>r2</sans>
        <tans>radius2</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>+</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-3-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Nice, you found the correct value for \(r_2\)! Good job!</p> <p>Check whether you did anything different here than for \(r_1\) and try again. </p>]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt1-3-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[<p>The value you gave for \(r_2\) is also not correct. Make sure, you're giving the values in the format specified in the task explanation.</p>]]></text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>prt2</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text>phi1:ans2[1];
phi2:ans2[2];</text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>AlgEquiv</answertest>
        <sans>phi1</sans>
        <tans>phistartr</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty></truepenalty>
        <truenextnode>1</truenextnode>
        <trueanswernote>prt2-1-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Nice, you found the correct value for \(\phi_1\)! Good job!<p>]]></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>2</falsenextnode>
        <falseanswernote>prt2-1-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[<p>The value you gave for \(\phi_1\) is not correct.  </p>]]></text>
        </falsefeedback>
      </node>
      <node>
        <name>1</name>
        <answertest>AlgEquiv</answertest>
        <sans>phi2</sans>
        <tans>phistartr + phiranger</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>+</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt2-2-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Nice, you found the correct value for \(\phi_2\)! Good job!</p> <p> Perfect! You got both values of \(\phi\) right! </p>]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt2-2-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[<p>The value you gave for \(\phi_2\) is not correct. Make sure, you're giving the values in the format specified in the task explanation.</p>]]></text>
        </falsefeedback>
      </node>
      <node>
        <name>2</name>
        <answertest>AlgEquiv</answertest>
        <sans>phi2</sans>
        <tans>phistartr + phiranger</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>+</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt2-3-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Nice, you found the correct value for \(\phi_2\)! Good job!</p> <p>Check whether you did anything different here than for \(\phi_1\) and try again. </p>]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt2-3-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[<p>The value you gave for \(\phi_2\) is also not correct. Make sure, you're giving the values in the format specified in the task explanation.</p>]]></text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>prt3</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text>psi1:ans3[1];
psi2:ans3[2];</text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>AlgEquiv</answertest>
        <sans>psi1</sans>
        <tans>psistartr</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty></truepenalty>
        <truenextnode>1</truenextnode>
        <trueanswernote>prt3-1-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Nice, you found the correct value for \(\psi_1\)! Good job!<p>]]></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>2</falsenextnode>
        <falseanswernote>prt3-1-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[<p>The value you gave for \(\psi_1\) is not correct.  </p>]]></text>
        </falsefeedback>
      </node>
      <node>
        <name>1</name>
        <answertest>AlgEquiv</answertest>
        <sans>psi2</sans>
        <tans>psistartr + psiranger</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>+</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt3-2-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Nice, you found the correct value for \(\psi_2\)! Good job!</p> <p> Perfect! You got both values of \(\psi\) right! </p>
<hr>
You can now compare your response to the reference volume. Your solution is displayed in orange. In addition, you can see the cross sections in the \(x-y\)-plane and \(x-z\)-plane. Note, that you can deactivate the visualizations using the button.
[[jsxgraph width="500px" height="500px" input-ref-ans1='ans1Ref']]
var board = JXG.JSXGraph.initBoard(divid,{boundingbox : [-8, 8, 8,-8], axis:false, shownavigation : false});
                        var box = [-5,5];
                    var view = board.create('view3d',
                        [
                            [-6, -1], [8, 8],
                            [box, box, box]
                        ],
                        {
                            xPlaneRear: { visible: false },
                            xPlaneRearYAxis: { visible: false },
                            xPlaneRearZAxis: { visible: false },
                            yPlaneRear: { visible: false },
                            yPlaneRearXAxis: { visible: false },
                            yPlaneRearZAxis: { visible: false },
                        });
 
                    // axis labels
                       var xlabel=view.create('point3d',[0.9*box[1],0,(0.6*box[0]+0.4*box[1])], {size:0,name:"x"});
                       var ylabel=view.create('point3d',[0,0.9*box[1],(0.6*box[0]+0.4*box[1])], {size:0,name:"y"});
                       var zlabel=view.create('point3d',[
                           0.7*(0.6*box[0]+0.4*box[1]),
                           0.7*(0.6*box[0]+0.4*box[1]),
                           0.9*box[1]], 
                           {size:0,name:"z"}); 
                    
                    var vector = []; 
                    var objectListXYPlane = []; 
                    var objectListXZPlane = []; 
                    var listRefVolume= []; 
                    var listStudVolume = [];
                    var scaleVec = 0.5;
                    var c1,c2,c3,c4,c5,c6;
                    var cs1,cs2,cs3,cs4,cs5,cs6;

		            // Transform components of the vector function

		            var TF1 = (u,v,w) => u * Math.cos(v)* Math.sin(w) ;
		            var TF2 = (u,v,w) => u * Math.sin(v)* Math.sin(w) ;
		            var TF3 = (u,v,w) => u * Math.cos(w);

		                
	
		            // Create Slider
		                        var u1ref = {#radius1#};
		                        var u2ref = {#radius2#};
		                        var v1ref = {#phistart#};
		                        var v2ref = {#phistart#}+{#phirange#};
		                        var w1ref = {#psistart#};
		                        var w2ref = {#psistart#}+{#psirange#};

                                var u1raw = '{#ans1[1]#}';
                                var u1stud = eval(u1raw.replace(/%pi/g, "Math.PI"));
                                var u2raw = '{#ans1[2]#}';
                                var u2stud = eval(u2raw.replace(/%pi/g, "Math.PI"));
                                var v1raw = '{#ans2[1]#}';
                                var v1stud = eval(v1raw.replace(/%pi/g, "Math.PI"));
                                var v2raw = '{#ans2[2]#}';
                                var v2stud = eval(v2raw.replace(/%pi/g, "Math.PI"));
                                var w1raw = '{#ans3[1]#}';
                                var w1stud = eval(w1raw.replace(/%pi/g, "Math.PI"));
                                var w2raw = '{#ans3[2]#}';
                                var w2stud = eval(w2raw.replace(/%pi/g, "Math.PI"));

                                createRefVolume ();
                    createStudVolume();

                    // list for toggeling
                    listRefVolume.push(c1.element2D,c2.element2D,c3.element2D,c4.element2D,c5.element2D,c6.element2D);
                    listStudVolume.push(cs1.element2D,cs2.element2D,cs3.element2D,cs4.element2D,cs5.element2D,cs6.element2D); 

                        

                    var XYPlane = view.create('plane3d', [
                          [0,0,0],[1,0,0], [0,1,0],
                    ], {
                        fillOpacity: 0.5, fillColor: "#1f84bc", visible:true
                    });

                    var XZPlane = view.create('plane3d', [
                          [0,0,0],[1,0,0], [0,0,1],
                    ], {
                        fillOpacity: 0.5, fillColor: "#1f84bc", visible:true
                    });

                    // curves in xy plane
                var curveRef1= view.create('curve3d', [
                    (t) => TF1(t,v1ref,Math.PI/2),
                    (t) => TF2(t,v1ref,Math.PI/2),
		            (t) => TF3(t,v1ref,Math.PI/2),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud1= view.create('curve3d', [
                    (t) => TF1(t,v1stud,Math.PI/2),
                    (t) => TF2(t,v1stud,Math.PI/2),
                    (t) => TF3(t,v1stud,Math.PI/2),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRef2= view.create('curve3d', [
                    (t) => TF1(t,v2ref,Math.PI/2),
                    (t) => TF2(t,v2ref,Math.PI/2),
		            (t) => TF3(t,v2ref,Math.PI/2),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud2= view.create('curve3d', [
                    (t) => TF1(t,v2stud,Math.PI/2),
                    (t) => TF2(t,v2stud,Math.PI/2),
                    (t) => TF3(t,v2stud,Math.PI/2),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRef3= view.create('curve3d', [
                    (t) => TF1(u1ref,t,Math.PI/2),
                    (t) => TF2(u1ref,t,Math.PI/2),
		            (t) => TF3(u1ref,t,Math.PI/2),
		            [v1ref, v2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud3= view.create('curve3d', [
                    (t) => TF1(u1stud,t,Math.PI/2),
                    (t) => TF2(u1stud,t,Math.PI/2),
                    (t) => TF3(u1stud,t,Math.PI/2),
                    () => [v1stud, v2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });
    
                var curveRef4= view.create('curve3d', [
                    (t) => TF1(u2ref,t,Math.PI/2),
                    (t) => TF2(u2ref,t,Math.PI/2),
		            (t) => TF3(u2ref,t,Math.PI/2),
		            [v1ref, v2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud4 = view.create('curve3d', [
                    (t) => TF1(u2stud,t,Math.PI/2),
                    (t) => TF2(u2stud,t,Math.PI/2),
                    (t) => TF3(u2stud,t,Math.PI/2),
                    () => [v1stud, v2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });
    
// curves in xz plane
                var curveRefXZ1= view.create('curve3d', [
                    (t) => TF1(t,0,w1ref),
                    (t) => TF2(t,0,w1ref),
		            (t) => TF3(t,0,w1ref),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ1= view.create('curve3d', [
                    (t) => TF1(t,0,w1stud),
                    (t) => TF2(t,0,w1stud),
                    (t) => TF3(t,0,w1stud),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRefXZ2= view.create('curve3d', [
                    (t) => TF1(t,0,w2ref),
                    (t) => TF2(t,0,w2ref),
		            (t) => TF3(t,0,w2ref),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ2= view.create('curve3d', [
                    (t) => TF1(t,0,w2stud),
                    (t) => TF2(t,0,w2stud),
                    (t) => TF3(t,0,w2stud),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRefXZ3= view.create('curve3d', [
                    (t) => TF1(u1ref,0,t),
                    (t) => TF2(u1ref,0,t),
		            (t) => TF3(u1ref,0,t),
		            [w1ref, w2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ3= view.create('curve3d', [
                    (t) => TF1(u1stud,0,t),
                    (t) => TF2(u1stud,0,t),
                    (t) => TF3(u1stud,0,t),
                    () => [w1stud, w2stud]
                    ], { strokeWidth: 3, strokeColor: '#EE442F', visible: true });
    
                var curveRefXZ4= view.create('curve3d', [
                    (t) => TF1(u2ref,0,t),
                    (t) => TF2(u2ref,0,t),
		            (t) => TF3(u2ref,0,t),
		            [w1ref, w2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ4 = view.create('curve3d', [
                    (t) => TF1(u2stud,0,t),
                    (t) => TF2(u2stud,0,t),
                    (t) => TF3(u2stud,0,t),
                    () => [w1stud, w2stud]
                    ], { strokeWidth: 3, strokeColor: '#EE442F', visible: true });

        // generate info for xy-plane
                    objectListXYPlane.push(XYPlane.element2D,curveRef1.element2D,
                        curveRef2.element2D,curveRef3.element2D,curveRef4.element2D,
                        curveStud1.element2D,curveStud2.element2D,curveStud3.element2D,
                        curveStud4.element2D);
                    objectListXZPlane.push(XZPlane.element2D,curveRefXZ1.element2D,
                        curveRefXZ2.element2D,curveRefXZ3.element2D,curveRefXZ4.element2D,
                        curveStudXZ1.element2D,curveStudXZ2.element2D,curveStudXZ3.element2D,
                        curveStudXZ4.element2D);
                    var button1 = board.create('button', [-7, -6, 'XY-plane', 
                        function() {toggleList(objectListXYPlane);}], {fixed:true});
                    var button2 = board.create('button', [-5, -6, 'XZ-plane', 
                        function() {toggleList(objectListXZPlane);}], {fixed:true});
                    var button3 = board.create('button', [-3, -6, 'Reference Volume', 
                    function() {toggleList(listRefVolume);}], {fixed:true});
                    var button4 = board.create('button', [0.5 , -6, 'Student Volume',  
                    function() {toggleList(listStudVolume);}], {fixed:true});
// function to toggle visible attribute given in a list
                    function toggleList(inputList){
                        for (let iloop=0; iloop < inputList.length; iloop++)
                        {
                            if (JXG.exists(inputList[iloop]))
                            {
                                if (inputList[iloop].getAttribute('visible')){
                                    inputList[iloop].setAttribute({visible:false});
                                }
                                else {
                                    inputList[iloop].setAttribute({visible:true});
                                    inputList[iloop].show();
                                }
                                inputList[iloop].update();
                            }
                        }
                    }
                    function createRefVolume () {
                                            // Create transformed box
                    c1 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w1ref),
                        (u, v) => TF2(u,v,w1ref),
                        (u, v) => TF3(u,v,w1ref),
                        () => [u1ref, u2ref],
                        () => [v1ref, v2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: true }, strokeColor: "#1f84bc" });

                    c2 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w2ref),
                        (u, v) => TF2(u,v,w2ref),
                        (u, v) => TF3(u,v,w2ref),
                        () => [u1ref, u2ref],
                        () => [v1ref, v2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });

                    c3 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v1ref,w),
                        (u, w) => TF2(u,v1ref,w),
                        (u, w) => TF3(u,v1ref,w),
                        () => [u1ref, u2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c4 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v2ref,w),
                        (u, w) => TF2(u,v2ref,w),
                        (u, w) => TF3(u,v2ref,w),
                        () => [u1ref, u2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c5 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u1ref,v,w),
                        (v, w) => TF2(u1ref,v,w),
                        (v, w) => TF3(u1ref,v,w),
                        () => [v1ref, v2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c6 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u2ref,v,w),
                        (v, w) => TF2(u2ref,v,w),
                        (v, w) => TF3(u2ref,v,w),
                        () => [v1ref, v2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });

                    }
                    function createStudVolume () {
                                        // Create transformed box
                        cs1 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w1stud),
                        (u, v) => TF2(u,v,w1stud),
                        (u, v) => TF3(u,v,w1stud),
                        () => [u1stud, u2stud],
                        () => [v1stud, v2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: true } });

                        cs2 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w2stud),
                        (u, v) => TF2(u,v,w2stud),
                        (u, v) => TF3(u,v,w2stud),
                        () => [u1stud, u2stud],
                        () => [v1stud, v2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });

                        cs3 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v1stud,w),
                        (u, w) => TF2(u,v1stud,w),
                        (u, w) => TF3(u,v1stud,w),
                        () => [u1stud, u2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs4 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v2stud,w),
                        (u, w) => TF2(u,v2stud,w),
                        (u, w) => TF3(u,v2stud,w),
                        () => [u1stud, u2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs5 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u1stud,v,w),
                        (v, w) => TF2(u1stud,v,w),
                        (v, w) => TF3(u1stud,v,w),
                        () => [v1stud, v2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs6 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u2stud,v,w),
                        (v, w) => TF2(u2stud,v,w),
                        (v, w) => TF3(u2stud,v,w),
                        () => [v1stud, v2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });


                    }       
board.update();



[[/jsxgraph]]]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt3-2-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[<p>The value you gave for \(\psi_2\) is not correct.  Make sure, you're giving the values in the format specified in the task explanation.</p>
<hr>
You can now compare your response to the reference volume. Your solution is displayed in orange. In addition, you can see the cross sections in the \(x-y\)-plane and \(x-z\)-plane. Note, that you can deactivate the visualizations using the button.
[[jsxgraph width="500px" height="500px" input-ref-ans1='ans1Ref']]
var board = JXG.JSXGraph.initBoard(divid,{boundingbox : [-8, 8, 8,-8], axis:false, shownavigation : false});
                        var box = [-5,5];
                    var view = board.create('view3d',
                        [
                            [-6, -1], [8, 8],
                            [box, box, box]
                        ],
                        {
                            xPlaneRear: { visible: false },
                            xPlaneRearYAxis: { visible: false },
                            xPlaneRearZAxis: { visible: false },
                            yPlaneRear: { visible: false },
                            yPlaneRearXAxis: { visible: false },
                            yPlaneRearZAxis: { visible: false },
                        });
 
                    // axis labels
                       var xlabel=view.create('point3d',[0.9*box[1],0,(0.6*box[0]+0.4*box[1])], {size:0,name:"x"});
                       var ylabel=view.create('point3d',[0,0.9*box[1],(0.6*box[0]+0.4*box[1])], {size:0,name:"y"});
                       var zlabel=view.create('point3d',[
                           0.7*(0.6*box[0]+0.4*box[1]),
                           0.7*(0.6*box[0]+0.4*box[1]),
                           0.9*box[1]], 
                           {size:0,name:"z"}); 
                    
                    var vector = []; 
                    var objectListXYPlane = []; 
                    var objectListXZPlane = []; 
                    var listRefVolume= []; 
                    var listStudVolume = [];
                    var scaleVec = 0.5;
                    var c1,c2,c3,c4,c5,c6;
                    var cs1,cs2,cs3,cs4,cs5,cs6;

		            // Transform components of the vector function

		            var TF1 = (u,v,w) => u * Math.cos(v)* Math.sin(w) ;
		            var TF2 = (u,v,w) => u * Math.sin(v)* Math.sin(w) ;
		            var TF3 = (u,v,w) => u * Math.cos(w);

		                
	
		            // Create Slider
		                        var u1ref = {#radius1#};
		                        var u2ref = {#radius2#};
		                        var v1ref = {#phistart#};
		                        var v2ref = {#phistart#}+{#phirange#};
		                        var w1ref = {#psistart#};
		                        var w2ref = {#psistart#}+{#psirange#};

                                var u1raw = '{#ans1[1]#}';
                                var u1stud = eval(u1raw.replace(/%pi/g, "Math.PI"));
                                var u2raw = '{#ans1[2]#}';
                                var u2stud = eval(u2raw.replace(/%pi/g, "Math.PI"));
                                var v1raw = '{#ans2[1]#}';
                                var v1stud = eval(v1raw.replace(/%pi/g, "Math.PI"));
                                var v2raw = '{#ans2[2]#}';
                                var v2stud = eval(v2raw.replace(/%pi/g, "Math.PI"));
                                var w1raw = '{#ans3[1]#}';
                                var w1stud = eval(w1raw.replace(/%pi/g, "Math.PI"));
                                var w2raw = '{#ans3[2]#}';
                                var w2stud = eval(w2raw.replace(/%pi/g, "Math.PI"));

                                createRefVolume ();
                    createStudVolume();

                    // list for toggeling
                    listRefVolume.push(c1.element2D,c2.element2D,c3.element2D,c4.element2D,c5.element2D,c6.element2D);
                    listStudVolume.push(cs1.element2D,cs2.element2D,cs3.element2D,cs4.element2D,cs5.element2D,cs6.element2D); 

                        

                    var XYPlane = view.create('plane3d', [
                          [0,0,0],[1,0,0], [0,1,0],
                    ], {
                        fillOpacity: 0.5, fillColor: "#1f84bc", visible:true
                    });

                    var XZPlane = view.create('plane3d', [
                          [0,0,0],[1,0,0], [0,0,1],
                    ], {
                        fillOpacity: 0.5, fillColor: "#1f84bc", visible:true
                    });

                    // curves in xy plane
                var curveRef1= view.create('curve3d', [
                    (t) => TF1(t,v1ref,Math.PI/2),
                    (t) => TF2(t,v1ref,Math.PI/2),
		            (t) => TF3(t,v1ref,Math.PI/2),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud1= view.create('curve3d', [
                    (t) => TF1(t,v1stud,Math.PI/2),
                    (t) => TF2(t,v1stud,Math.PI/2),
                    (t) => TF3(t,v1stud,Math.PI/2),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRef2= view.create('curve3d', [
                    (t) => TF1(t,v2ref,Math.PI/2),
                    (t) => TF2(t,v2ref,Math.PI/2),
		            (t) => TF3(t,v2ref,Math.PI/2),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud2= view.create('curve3d', [
                    (t) => TF1(t,v2stud,Math.PI/2),
                    (t) => TF2(t,v2stud,Math.PI/2),
                    (t) => TF3(t,v2stud,Math.PI/2),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRef3= view.create('curve3d', [
                    (t) => TF1(u1ref,t,Math.PI/2),
                    (t) => TF2(u1ref,t,Math.PI/2),
		            (t) => TF3(u1ref,t,Math.PI/2),
		            [v1ref, v2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud3= view.create('curve3d', [
                    (t) => TF1(u1stud,t,Math.PI/2),
                    (t) => TF2(u1stud,t,Math.PI/2),
                    (t) => TF3(u1stud,t,Math.PI/2),
                    () => [v1stud, v2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });
    
                var curveRef4= view.create('curve3d', [
                    (t) => TF1(u2ref,t,Math.PI/2),
                    (t) => TF2(u2ref,t,Math.PI/2),
		            (t) => TF3(u2ref,t,Math.PI/2),
		            [v1ref, v2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud4 = view.create('curve3d', [
                    (t) => TF1(u2stud,t,Math.PI/2),
                    (t) => TF2(u2stud,t,Math.PI/2),
                    (t) => TF3(u2stud,t,Math.PI/2),
                    () => [v1stud, v2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });
    
// curves in xz plane
                var curveRefXZ1= view.create('curve3d', [
                    (t) => TF1(t,0,w1ref),
                    (t) => TF2(t,0,w1ref),
		            (t) => TF3(t,0,w1ref),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ1= view.create('curve3d', [
                    (t) => TF1(t,0,w1stud),
                    (t) => TF2(t,0,w1stud),
                    (t) => TF3(t,0,w1stud),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRefXZ2= view.create('curve3d', [
                    (t) => TF1(t,0,w2ref),
                    (t) => TF2(t,0,w2ref),
		            (t) => TF3(t,0,w2ref),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ2= view.create('curve3d', [
                    (t) => TF1(t,0,w2stud),
                    (t) => TF2(t,0,w2stud),
                    (t) => TF3(t,0,w2stud),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRefXZ3= view.create('curve3d', [
                    (t) => TF1(u1ref,0,t),
                    (t) => TF2(u1ref,0,t),
		            (t) => TF3(u1ref,0,t),
		            [w1ref, w2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ3= view.create('curve3d', [
                    (t) => TF1(u1stud,0,t),
                    (t) => TF2(u1stud,0,t),
                    (t) => TF3(u1stud,0,t),
                    () => [w1stud, w2stud]
                    ], { strokeWidth: 3, strokeColor: '#EE442F', visible: true });
    
                var curveRefXZ4= view.create('curve3d', [
                    (t) => TF1(u2ref,0,t),
                    (t) => TF2(u2ref,0,t),
		            (t) => TF3(u2ref,0,t),
		            [w1ref, w2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ4 = view.create('curve3d', [
                    (t) => TF1(u2stud,0,t),
                    (t) => TF2(u2stud,0,t),
                    (t) => TF3(u2stud,0,t),
                    () => [w1stud, w2stud]
                    ], { strokeWidth: 3, strokeColor: '#EE442F', visible: true });

        // generate info for xy-plane
                    objectListXYPlane.push(XYPlane.element2D,curveRef1.element2D,
                        curveRef2.element2D,curveRef3.element2D,curveRef4.element2D,
                        curveStud1.element2D,curveStud2.element2D,curveStud3.element2D,
                        curveStud4.element2D);
                    objectListXZPlane.push(XZPlane.element2D,curveRefXZ1.element2D,
                        curveRefXZ2.element2D,curveRefXZ3.element2D,curveRefXZ4.element2D,
                        curveStudXZ1.element2D,curveStudXZ2.element2D,curveStudXZ3.element2D,
                        curveStudXZ4.element2D);
                    var button1 = board.create('button', [-7, -6, 'XY-plane', 
                        function() {toggleList(objectListXYPlane);}], {fixed:true});
                    var button2 = board.create('button', [-5, -6, 'XZ-plane', 
                        function() {toggleList(objectListXZPlane);}], {fixed:true});
                    var button3 = board.create('button', [-3, -6, 'Reference Volume', 
                    function() {toggleList(listRefVolume);}], {fixed:true});
                    var button4 = board.create('button', [0.5 , -6, 'Student Volume',  
                    function() {toggleList(listStudVolume);}], {fixed:true});
// function to toggle visible attribute given in a list
                    function toggleList(inputList){
                        for (let iloop=0; iloop < inputList.length; iloop++)
                        {
                            if (JXG.exists(inputList[iloop]))
                            {
                                if (inputList[iloop].getAttribute('visible')){
                                    inputList[iloop].setAttribute({visible:false});
                                }
                                else {
                                    inputList[iloop].setAttribute({visible:true});
                                    inputList[iloop].show();
                                }
                                inputList[iloop].update();
                            }
                        }
                    }
                    function createRefVolume () {
                                            // Create transformed box
                    c1 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w1ref),
                        (u, v) => TF2(u,v,w1ref),
                        (u, v) => TF3(u,v,w1ref),
                        () => [u1ref, u2ref],
                        () => [v1ref, v2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: true }, strokeColor: "#1f84bc" });

                    c2 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w2ref),
                        (u, v) => TF2(u,v,w2ref),
                        (u, v) => TF3(u,v,w2ref),
                        () => [u1ref, u2ref],
                        () => [v1ref, v2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });

                    c3 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v1ref,w),
                        (u, w) => TF2(u,v1ref,w),
                        (u, w) => TF3(u,v1ref,w),
                        () => [u1ref, u2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c4 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v2ref,w),
                        (u, w) => TF2(u,v2ref,w),
                        (u, w) => TF3(u,v2ref,w),
                        () => [u1ref, u2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c5 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u1ref,v,w),
                        (v, w) => TF2(u1ref,v,w),
                        (v, w) => TF3(u1ref,v,w),
                        () => [v1ref, v2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c6 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u2ref,v,w),
                        (v, w) => TF2(u2ref,v,w),
                        (v, w) => TF3(u2ref,v,w),
                        () => [v1ref, v2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });

                    }
                    function createStudVolume () {
                                        // Create transformed box
                        cs1 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w1stud),
                        (u, v) => TF2(u,v,w1stud),
                        (u, v) => TF3(u,v,w1stud),
                        () => [u1stud, u2stud],
                        () => [v1stud, v2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: true } });

                        cs2 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w2stud),
                        (u, v) => TF2(u,v,w2stud),
                        (u, v) => TF3(u,v,w2stud),
                        () => [u1stud, u2stud],
                        () => [v1stud, v2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });

                        cs3 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v1stud,w),
                        (u, w) => TF2(u,v1stud,w),
                        (u, w) => TF3(u,v1stud,w),
                        () => [u1stud, u2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs4 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v2stud,w),
                        (u, w) => TF2(u,v2stud,w),
                        (u, w) => TF3(u,v2stud,w),
                        () => [u1stud, u2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs5 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u1stud,v,w),
                        (v, w) => TF2(u1stud,v,w),
                        (v, w) => TF3(u1stud,v,w),
                        () => [v1stud, v2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs6 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u2stud,v,w),
                        (v, w) => TF2(u2stud,v,w),
                        (v, w) => TF3(u2stud,v,w),
                        () => [v1stud, v2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });


                    }       
board.update();



[[/jsxgraph]]]]></text>
        </falsefeedback>
      </node>
      <node>
        <name>2</name>
        <answertest>AlgEquiv</answertest>
        <sans>psi2</sans>
        <tans>psistartr + psiranger</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>+</truescoremode>
        <truescore>0.5</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt3-3-T</trueanswernote>
        <truefeedback format="html">
          <text><![CDATA[<p>Nice, you found the correct value for \(\psi_2\)! Good job!</p> <p>Check whether you did anything different here than for \(\psi_1\) and try again. </p>
<hr>
You can now compare your response to the reference volume. Your solution is displayed in orange. In addition, you can see the cross sections in the \(x-y\)-plane and \(x-z\)-plane. Note, that you can deactivate the visualizations using the button.
[[jsxgraph width="500px" height="500px" input-ref-ans1='ans1Ref']]
var board = JXG.JSXGraph.initBoard(divid,{boundingbox : [-8, 8, 8,-8], axis:false, shownavigation : false});
                        var box = [-5,5];
                    var view = board.create('view3d',
                        [
                            [-6, -1], [8, 8],
                            [box, box, box]
                        ],
                        {
                            xPlaneRear: { visible: false },
                            xPlaneRearYAxis: { visible: false },
                            xPlaneRearZAxis: { visible: false },
                            yPlaneRear: { visible: false },
                            yPlaneRearXAxis: { visible: false },
                            yPlaneRearZAxis: { visible: false },
                        });
 
                    // axis labels
                       var xlabel=view.create('point3d',[0.9*box[1],0,(0.6*box[0]+0.4*box[1])], {size:0,name:"x"});
                       var ylabel=view.create('point3d',[0,0.9*box[1],(0.6*box[0]+0.4*box[1])], {size:0,name:"y"});
                       var zlabel=view.create('point3d',[
                           0.7*(0.6*box[0]+0.4*box[1]),
                           0.7*(0.6*box[0]+0.4*box[1]),
                           0.9*box[1]], 
                           {size:0,name:"z"}); 
                    
                    var vector = []; 
                    var objectListXYPlane = []; 
                    var objectListXZPlane = []; 
                    var listRefVolume= []; 
                    var listStudVolume = [];
                    var scaleVec = 0.5;
                    var c1,c2,c3,c4,c5,c6;
                    var cs1,cs2,cs3,cs4,cs5,cs6;

		            // Transform components of the vector function

		            var TF1 = (u,v,w) => u * Math.cos(v)* Math.sin(w) ;
		            var TF2 = (u,v,w) => u * Math.sin(v)* Math.sin(w) ;
		            var TF3 = (u,v,w) => u * Math.cos(w);

		                
	
		            // Create Slider
		                        var u1ref = {#radius1#};
		                        var u2ref = {#radius2#};
		                        var v1ref = {#phistart#};
		                        var v2ref = {#phistart#}+{#phirange#};
		                        var w1ref = {#psistart#};
		                        var w2ref = {#psistart#}+{#psirange#};

                                var u1raw = '{#ans1[1]#}';
                                var u1stud = eval(u1raw.replace(/%pi/g, "Math.PI"));
                                var u2raw = '{#ans1[2]#}';
                                var u2stud = eval(u2raw.replace(/%pi/g, "Math.PI"));
                                var v1raw = '{#ans2[1]#}';
                                var v1stud = eval(v1raw.replace(/%pi/g, "Math.PI"));
                                var v2raw = '{#ans2[2]#}';
                                var v2stud = eval(v2raw.replace(/%pi/g, "Math.PI"));
                                var w1raw = '{#ans3[1]#}';
                                var w1stud = eval(w1raw.replace(/%pi/g, "Math.PI"));
                                var w2raw = '{#ans3[2]#}';
                                var w2stud = eval(w2raw.replace(/%pi/g, "Math.PI"));

                                createRefVolume ();
                    createStudVolume();

                    // list for toggeling
                    listRefVolume.push(c1.element2D,c2.element2D,c3.element2D,c4.element2D,c5.element2D,c6.element2D);
                    listStudVolume.push(cs1.element2D,cs2.element2D,cs3.element2D,cs4.element2D,cs5.element2D,cs6.element2D); 

                        

                    var XYPlane = view.create('plane3d', [
                          [0,0,0],[1,0,0], [0,1,0],
                    ], {
                        fillOpacity: 0.5, fillColor: "#1f84bc", visible:true
                    });

                    var XZPlane = view.create('plane3d', [
                          [0,0,0],[1,0,0], [0,0,1],
                    ], {
                        fillOpacity: 0.5, fillColor: "#1f84bc", visible:true
                    });

                    // curves in xy plane
                var curveRef1= view.create('curve3d', [
                    (t) => TF1(t,v1ref,Math.PI/2),
                    (t) => TF2(t,v1ref,Math.PI/2),
		            (t) => TF3(t,v1ref,Math.PI/2),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud1= view.create('curve3d', [
                    (t) => TF1(t,v1stud,Math.PI/2),
                    (t) => TF2(t,v1stud,Math.PI/2),
                    (t) => TF3(t,v1stud,Math.PI/2),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRef2= view.create('curve3d', [
                    (t) => TF1(t,v2ref,Math.PI/2),
                    (t) => TF2(t,v2ref,Math.PI/2),
		            (t) => TF3(t,v2ref,Math.PI/2),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud2= view.create('curve3d', [
                    (t) => TF1(t,v2stud,Math.PI/2),
                    (t) => TF2(t,v2stud,Math.PI/2),
                    (t) => TF3(t,v2stud,Math.PI/2),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRef3= view.create('curve3d', [
                    (t) => TF1(u1ref,t,Math.PI/2),
                    (t) => TF2(u1ref,t,Math.PI/2),
		            (t) => TF3(u1ref,t,Math.PI/2),
		            [v1ref, v2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud3= view.create('curve3d', [
                    (t) => TF1(u1stud,t,Math.PI/2),
                    (t) => TF2(u1stud,t,Math.PI/2),
                    (t) => TF3(u1stud,t,Math.PI/2),
                    () => [v1stud, v2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });
    
                var curveRef4= view.create('curve3d', [
                    (t) => TF1(u2ref,t,Math.PI/2),
                    (t) => TF2(u2ref,t,Math.PI/2),
		            (t) => TF3(u2ref,t,Math.PI/2),
		            [v1ref, v2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud4 = view.create('curve3d', [
                    (t) => TF1(u2stud,t,Math.PI/2),
                    (t) => TF2(u2stud,t,Math.PI/2),
                    (t) => TF3(u2stud,t,Math.PI/2),
                    () => [v1stud, v2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });
    
// curves in xz plane
                var curveRefXZ1= view.create('curve3d', [
                    (t) => TF1(t,0,w1ref),
                    (t) => TF2(t,0,w1ref),
		            (t) => TF3(t,0,w1ref),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ1= view.create('curve3d', [
                    (t) => TF1(t,0,w1stud),
                    (t) => TF2(t,0,w1stud),
                    (t) => TF3(t,0,w1stud),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRefXZ2= view.create('curve3d', [
                    (t) => TF1(t,0,w2ref),
                    (t) => TF2(t,0,w2ref),
		            (t) => TF3(t,0,w2ref),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ2= view.create('curve3d', [
                    (t) => TF1(t,0,w2stud),
                    (t) => TF2(t,0,w2stud),
                    (t) => TF3(t,0,w2stud),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRefXZ3= view.create('curve3d', [
                    (t) => TF1(u1ref,0,t),
                    (t) => TF2(u1ref,0,t),
		            (t) => TF3(u1ref,0,t),
		            [w1ref, w2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ3= view.create('curve3d', [
                    (t) => TF1(u1stud,0,t),
                    (t) => TF2(u1stud,0,t),
                    (t) => TF3(u1stud,0,t),
                    () => [w1stud, w2stud]
                    ], { strokeWidth: 3, strokeColor: '#EE442F', visible: true });
    
                var curveRefXZ4= view.create('curve3d', [
                    (t) => TF1(u2ref,0,t),
                    (t) => TF2(u2ref,0,t),
		            (t) => TF3(u2ref,0,t),
		            [w1ref, w2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ4 = view.create('curve3d', [
                    (t) => TF1(u2stud,0,t),
                    (t) => TF2(u2stud,0,t),
                    (t) => TF3(u2stud,0,t),
                    () => [w1stud, w2stud]
                    ], { strokeWidth: 3, strokeColor: '#EE442F', visible: true });

        // generate info for xy-plane
                    objectListXYPlane.push(XYPlane.element2D,curveRef1.element2D,
                        curveRef2.element2D,curveRef3.element2D,curveRef4.element2D,
                        curveStud1.element2D,curveStud2.element2D,curveStud3.element2D,
                        curveStud4.element2D);
                    objectListXZPlane.push(XZPlane.element2D,curveRefXZ1.element2D,
                        curveRefXZ2.element2D,curveRefXZ3.element2D,curveRefXZ4.element2D,
                        curveStudXZ1.element2D,curveStudXZ2.element2D,curveStudXZ3.element2D,
                        curveStudXZ4.element2D);
                    var button1 = board.create('button', [-7, -6, 'XY-plane', 
                        function() {toggleList(objectListXYPlane);}], {fixed:true});
                    var button2 = board.create('button', [-5, -6, 'XZ-plane', 
                        function() {toggleList(objectListXZPlane);}], {fixed:true});
                    var button3 = board.create('button', [-3, -6, 'Reference Volume', 
                    function() {toggleList(listRefVolume);}], {fixed:true});
                    var button4 = board.create('button', [0.5 , -6, 'Student Volume',  
                    function() {toggleList(listStudVolume);}], {fixed:true});
// function to toggle visible attribute given in a list
                    function toggleList(inputList){
                        for (let iloop=0; iloop < inputList.length; iloop++)
                        {
                            if (JXG.exists(inputList[iloop]))
                            {
                                if (inputList[iloop].getAttribute('visible')){
                                    inputList[iloop].setAttribute({visible:false});
                                }
                                else {
                                    inputList[iloop].setAttribute({visible:true});
                                    inputList[iloop].show();
                                }
                                inputList[iloop].update();
                            }
                        }
                    }
                    function createRefVolume () {
                                            // Create transformed box
                    c1 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w1ref),
                        (u, v) => TF2(u,v,w1ref),
                        (u, v) => TF3(u,v,w1ref),
                        () => [u1ref, u2ref],
                        () => [v1ref, v2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: true }, strokeColor: "#1f84bc" });

                    c2 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w2ref),
                        (u, v) => TF2(u,v,w2ref),
                        (u, v) => TF3(u,v,w2ref),
                        () => [u1ref, u2ref],
                        () => [v1ref, v2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });

                    c3 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v1ref,w),
                        (u, w) => TF2(u,v1ref,w),
                        (u, w) => TF3(u,v1ref,w),
                        () => [u1ref, u2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c4 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v2ref,w),
                        (u, w) => TF2(u,v2ref,w),
                        (u, w) => TF3(u,v2ref,w),
                        () => [u1ref, u2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c5 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u1ref,v,w),
                        (v, w) => TF2(u1ref,v,w),
                        (v, w) => TF3(u1ref,v,w),
                        () => [v1ref, v2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c6 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u2ref,v,w),
                        (v, w) => TF2(u2ref,v,w),
                        (v, w) => TF3(u2ref,v,w),
                        () => [v1ref, v2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });

                    }
                    function createStudVolume () {
                                        // Create transformed box
                        cs1 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w1stud),
                        (u, v) => TF2(u,v,w1stud),
                        (u, v) => TF3(u,v,w1stud),
                        () => [u1stud, u2stud],
                        () => [v1stud, v2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: true } });

                        cs2 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w2stud),
                        (u, v) => TF2(u,v,w2stud),
                        (u, v) => TF3(u,v,w2stud),
                        () => [u1stud, u2stud],
                        () => [v1stud, v2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });

                        cs3 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v1stud,w),
                        (u, w) => TF2(u,v1stud,w),
                        (u, w) => TF3(u,v1stud,w),
                        () => [u1stud, u2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs4 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v2stud,w),
                        (u, w) => TF2(u,v2stud,w),
                        (u, w) => TF3(u,v2stud,w),
                        () => [u1stud, u2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs5 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u1stud,v,w),
                        (v, w) => TF2(u1stud,v,w),
                        (v, w) => TF3(u1stud,v,w),
                        () => [v1stud, v2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs6 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u2stud,v,w),
                        (v, w) => TF2(u2stud,v,w),
                        (v, w) => TF3(u2stud,v,w),
                        () => [v1stud, v2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });


                    }       
board.update();



[[/jsxgraph]]]]></text>
        </truefeedback>
        <falsescoremode>-</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt3-3-F</falseanswernote>
        <falsefeedback format="html">
          <text><![CDATA[<p>The value you gave for \(\psi_2\) is also not correct. Make sure, you're giving the values in the format specified in the task explanation.</p>
<hr>
You can now compare your response to the reference volume. Your solution is displayed in orange. In addition, you can see the cross sections in the \(x-y\)-plane and \(x-z\)-plane. Note, that you can deactivate the visualizations using the button.
[[jsxgraph width="500px" height="500px" input-ref-ans1='ans1Ref']]
var board = JXG.JSXGraph.initBoard(divid,{boundingbox : [-8, 8, 8,-8], axis:false, shownavigation : false});
                        var box = [-5,5];
                    var view = board.create('view3d',
                        [
                            [-6, -1], [8, 8],
                            [box, box, box]
                        ],
                        {
                            xPlaneRear: { visible: false },
                            xPlaneRearYAxis: { visible: false },
                            xPlaneRearZAxis: { visible: false },
                            yPlaneRear: { visible: false },
                            yPlaneRearXAxis: { visible: false },
                            yPlaneRearZAxis: { visible: false },
                        });
 
                    // axis labels
                       var xlabel=view.create('point3d',[0.9*box[1],0,(0.6*box[0]+0.4*box[1])], {size:0,name:"x"});
                       var ylabel=view.create('point3d',[0,0.9*box[1],(0.6*box[0]+0.4*box[1])], {size:0,name:"y"});
                       var zlabel=view.create('point3d',[
                           0.7*(0.6*box[0]+0.4*box[1]),
                           0.7*(0.6*box[0]+0.4*box[1]),
                           0.9*box[1]], 
                           {size:0,name:"z"}); 
                    
                    var vector = []; 
                    var objectListXYPlane = []; 
                    var objectListXZPlane = []; 
                    var listRefVolume= []; 
                    var listStudVolume = [];
                    var scaleVec = 0.5;
                    var c1,c2,c3,c4,c5,c6;
                    var cs1,cs2,cs3,cs4,cs5,cs6;

		            // Transform components of the vector function

		            var TF1 = (u,v,w) => u * Math.cos(v)* Math.sin(w) ;
		            var TF2 = (u,v,w) => u * Math.sin(v)* Math.sin(w) ;
		            var TF3 = (u,v,w) => u * Math.cos(w);

		                
	
		            // Create Slider
		                        var u1ref = {#radius1#};
		                        var u2ref = {#radius2#};
		                        var v1ref = {#phistart#};
		                        var v2ref = {#phistart#}+{#phirange#};
		                        var w1ref = {#psistart#};
		                        var w2ref = {#psistart#}+{#psirange#};

                                var u1raw = '{#ans1[1]#}';
                                var u1stud = eval(u1raw.replace(/%pi/g, "Math.PI"));
                                var u2raw = '{#ans1[2]#}';
                                var u2stud = eval(u2raw.replace(/%pi/g, "Math.PI"));
                                var v1raw = '{#ans2[1]#}';
                                var v1stud = eval(v1raw.replace(/%pi/g, "Math.PI"));
                                var v2raw = '{#ans2[2]#}';
                                var v2stud = eval(v2raw.replace(/%pi/g, "Math.PI"));
                                var w1raw = '{#ans3[1]#}';
                                var w1stud = eval(w1raw.replace(/%pi/g, "Math.PI"));
                                var w2raw = '{#ans3[2]#}';
                                var w2stud = eval(w2raw.replace(/%pi/g, "Math.PI"));

                                createRefVolume ();
                    createStudVolume();

                    // list for toggeling
                    listRefVolume.push(c1.element2D,c2.element2D,c3.element2D,c4.element2D,c5.element2D,c6.element2D);
                    listStudVolume.push(cs1.element2D,cs2.element2D,cs3.element2D,cs4.element2D,cs5.element2D,cs6.element2D); 

                        

                    var XYPlane = view.create('plane3d', [
                          [0,0,0],[1,0,0], [0,1,0],
                    ], {
                        fillOpacity: 0.5, fillColor: "#1f84bc", visible:true
                    });

                    var XZPlane = view.create('plane3d', [
                          [0,0,0],[1,0,0], [0,0,1],
                    ], {
                        fillOpacity: 0.5, fillColor: "#1f84bc", visible:true
                    });

                    // curves in xy plane
                var curveRef1= view.create('curve3d', [
                    (t) => TF1(t,v1ref,Math.PI/2),
                    (t) => TF2(t,v1ref,Math.PI/2),
		            (t) => TF3(t,v1ref,Math.PI/2),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud1= view.create('curve3d', [
                    (t) => TF1(t,v1stud,Math.PI/2),
                    (t) => TF2(t,v1stud,Math.PI/2),
                    (t) => TF3(t,v1stud,Math.PI/2),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRef2= view.create('curve3d', [
                    (t) => TF1(t,v2ref,Math.PI/2),
                    (t) => TF2(t,v2ref,Math.PI/2),
		            (t) => TF3(t,v2ref,Math.PI/2),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud2= view.create('curve3d', [
                    (t) => TF1(t,v2stud,Math.PI/2),
                    (t) => TF2(t,v2stud,Math.PI/2),
                    (t) => TF3(t,v2stud,Math.PI/2),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRef3= view.create('curve3d', [
                    (t) => TF1(u1ref,t,Math.PI/2),
                    (t) => TF2(u1ref,t,Math.PI/2),
		            (t) => TF3(u1ref,t,Math.PI/2),
		            [v1ref, v2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud3= view.create('curve3d', [
                    (t) => TF1(u1stud,t,Math.PI/2),
                    (t) => TF2(u1stud,t,Math.PI/2),
                    (t) => TF3(u1stud,t,Math.PI/2),
                    () => [v1stud, v2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });
    
                var curveRef4= view.create('curve3d', [
                    (t) => TF1(u2ref,t,Math.PI/2),
                    (t) => TF2(u2ref,t,Math.PI/2),
		            (t) => TF3(u2ref,t,Math.PI/2),
		            [v1ref, v2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStud4 = view.create('curve3d', [
                    (t) => TF1(u2stud,t,Math.PI/2),
                    (t) => TF2(u2stud,t,Math.PI/2),
                    (t) => TF3(u2stud,t,Math.PI/2),
                    () => [v1stud, v2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });
    
// curves in xz plane
                var curveRefXZ1= view.create('curve3d', [
                    (t) => TF1(t,0,w1ref),
                    (t) => TF2(t,0,w1ref),
		            (t) => TF3(t,0,w1ref),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ1= view.create('curve3d', [
                    (t) => TF1(t,0,w1stud),
                    (t) => TF2(t,0,w1stud),
                    (t) => TF3(t,0,w1stud),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRefXZ2= view.create('curve3d', [
                    (t) => TF1(t,0,w2ref),
                    (t) => TF2(t,0,w2ref),
		            (t) => TF3(t,0,w2ref),
		            [u1ref, u2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ2= view.create('curve3d', [
                    (t) => TF1(t,0,w2stud),
                    (t) => TF2(t,0,w2stud),
                    (t) => TF3(t,0,w2stud),
                    () => [u1stud, u2stud]
                    ], { strokeWidth: 3, strokeColor:'#EE442F', visible: true });

                var curveRefXZ3= view.create('curve3d', [
                    (t) => TF1(u1ref,0,t),
                    (t) => TF2(u1ref,0,t),
		            (t) => TF3(u1ref,0,t),
		            [w1ref, w2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ3= view.create('curve3d', [
                    (t) => TF1(u1stud,0,t),
                    (t) => TF2(u1stud,0,t),
                    (t) => TF3(u1stud,0,t),
                    () => [w1stud, w2stud]
                    ], { strokeWidth: 3, strokeColor: '#EE442F', visible: true });
    
                var curveRefXZ4= view.create('curve3d', [
                    (t) => TF1(u2ref,0,t),
                    (t) => TF2(u2ref,0,t),
		            (t) => TF3(u2ref,0,t),
		            [w1ref, w2ref]
		            ], { strokeWidth: 3, visible: true, strokeColor: "#1f84bc" });

                var curveStudXZ4 = view.create('curve3d', [
                    (t) => TF1(u2stud,0,t),
                    (t) => TF2(u2stud,0,t),
                    (t) => TF3(u2stud,0,t),
                    () => [w1stud, w2stud]
                    ], { strokeWidth: 3, strokeColor: '#EE442F', visible: true });

        // generate info for xy-plane
                    objectListXYPlane.push(XYPlane.element2D,curveRef1.element2D,
                        curveRef2.element2D,curveRef3.element2D,curveRef4.element2D,
                        curveStud1.element2D,curveStud2.element2D,curveStud3.element2D,
                        curveStud4.element2D);
                    objectListXZPlane.push(XZPlane.element2D,curveRefXZ1.element2D,
                        curveRefXZ2.element2D,curveRefXZ3.element2D,curveRefXZ4.element2D,
                        curveStudXZ1.element2D,curveStudXZ2.element2D,curveStudXZ3.element2D,
                        curveStudXZ4.element2D);
                    var button1 = board.create('button', [-7, -6, 'XY-plane', 
                        function() {toggleList(objectListXYPlane);}], {fixed:true});
                    var button2 = board.create('button', [-5, -6, 'XZ-plane', 
                        function() {toggleList(objectListXZPlane);}], {fixed:true});
                    var button3 = board.create('button', [-3, -6, 'Reference Volume', 
                    function() {toggleList(listRefVolume);}], {fixed:true});
                    var button4 = board.create('button', [0.5 , -6, 'Student Volume',  
                    function() {toggleList(listStudVolume);}], {fixed:true});
// function to toggle visible attribute given in a list
                    function toggleList(inputList){
                        for (let iloop=0; iloop < inputList.length; iloop++)
                        {
                            if (JXG.exists(inputList[iloop]))
                            {
                                if (inputList[iloop].getAttribute('visible')){
                                    inputList[iloop].setAttribute({visible:false});
                                }
                                else {
                                    inputList[iloop].setAttribute({visible:true});
                                    inputList[iloop].show();
                                }
                                inputList[iloop].update();
                            }
                        }
                    }
                    function createRefVolume () {
                                            // Create transformed box
                    c1 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w1ref),
                        (u, v) => TF2(u,v,w1ref),
                        (u, v) => TF3(u,v,w1ref),
                        () => [u1ref, u2ref],
                        () => [v1ref, v2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: true }, strokeColor: "#1f84bc" });

                    c2 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w2ref),
                        (u, v) => TF2(u,v,w2ref),
                        (u, v) => TF3(u,v,w2ref),
                        () => [u1ref, u2ref],
                        () => [v1ref, v2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });

                    c3 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v1ref,w),
                        (u, w) => TF2(u,v1ref,w),
                        (u, w) => TF3(u,v1ref,w),
                        () => [u1ref, u2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c4 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v2ref,w),
                        (u, w) => TF2(u,v2ref,w),
                        (u, w) => TF3(u,v2ref,w),
                        () => [u1ref, u2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c5 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u1ref,v,w),
                        (v, w) => TF2(u1ref,v,w),
                        (v, w) => TF3(u1ref,v,w),
                        () => [v1ref, v2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });
                    c6 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u2ref,v,w),
                        (v, w) => TF2(u2ref,v,w),
                        (v, w) => TF3(u2ref,v,w),
                        () => [v1ref, v2ref],
                        () => [w1ref, w2ref]
                    ], { strokeWidth: 1, strokeOpacity: 0.6, mesh3d: { visible: false }, strokeColor: "#1f84bc" });

                    }
                    function createStudVolume () {
                                        // Create transformed box
                        cs1 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w1stud),
                        (u, v) => TF2(u,v,w1stud),
                        (u, v) => TF3(u,v,w1stud),
                        () => [u1stud, u2stud],
                        () => [v1stud, v2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: true } });

                        cs2 = view.create('parametricsurface3d', [
                        (u, v) => TF1(u,v,w2stud),
                        (u, v) => TF2(u,v,w2stud),
                        (u, v) => TF3(u,v,w2stud),
                        () => [u1stud, u2stud],
                        () => [v1stud, v2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });

                        cs3 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v1stud,w),
                        (u, w) => TF2(u,v1stud,w),
                        (u, w) => TF3(u,v1stud,w),
                        () => [u1stud, u2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs4 = view.create('parametricsurface3d', [
                        (u, w) => TF1(u,v2stud,w),
                        (u, w) => TF2(u,v2stud,w),
                        (u, w) => TF3(u,v2stud,w),
                        () => [u1stud, u2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs5 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u1stud,v,w),
                        (v, w) => TF2(u1stud,v,w),
                        (v, w) => TF3(u1stud,v,w),
                        () => [v1stud, v2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });
                        cs6 = view.create('parametricsurface3d', [
                        (v, w) => TF1(u2stud,v,w),
                        (v, w) => TF2(u2stud,v,w),
                        (v, w) => TF3(u2stud,v,w),
                        () => [v1stud, v2stud],
                        () => [w1stud, w2stud]
                    ], { strokeWidth: 1, strokeOpacity: 1, strokeColor: '#EE442F', mesh3d: { visible: false } });


                    }       
board.update();



[[/jsxgraph]]]]></text>
        </falsefeedback>
      </node>
    </prt>
  </question>

</quiz>